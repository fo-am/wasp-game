;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;; little windows of foraging wasps

;; clouds have storm variation
(define (make-cloud pos speed img simg) (list pos speed img simg))
(define (cloud-pos c) (list-ref c 0))
(define (cloud-speed c) (list-ref c 1))
(define (cloud-img c) (list-ref c 2))
(define (cloud-simg c) (list-ref c 3))

(define (cloud-render c ctx pos weather)
  (let ((pos (v2add pos (cloud-pos c))))
    (ctx.drawImage
     (if (eq? weather 'stormy) (cloud-simg c) (cloud-img c))
     (- (vx pos) 200) (vy pos))))

(define (cloud-update c delta dir)
  (make-cloud
   (vec2
    (modulo (+ (vx (cloud-pos c))
	       (* (cloud-speed c) delta 
		  (if (eq? dir 'right) 1 -1))) 500)
    (vy (cloud-pos c)))
   (cloud-speed c)
   (cloud-img c)
   (cloud-simg c)
   ))

(define (make-window wasp env clouds w h weather time)
  (list wasp env clouds w h weather time))
(define (window-wasp w) (list-ref w 0))
(define (window-modify-wasp w s) (list-replace w 0 s))
(define (window-env w) (list-ref w 1))
(define (window-clouds w) (list-ref w 2))
(define (window-w w) (list-ref w 3))
(define (window-h w) (list-ref w 4))
(define (window-weather w) (list-ref w 5))
(define (window-time w) (list-ref w 6))

(define (build-window wasp)
  (make-window
   wasp
   "temperate-city" 
   (list
    (let ((v (choose (list 1 2 3 4 5 6))))
      (make-cloud (vec2 (random 200) (random 100))
		  (- (+ 50 (random 50)))		 
		  (find-image (string-append "sprites/cloud-" v ".png"))
		  (find-image (string-append "sprites/scloud-" v ".png"))))
    
    (let ((v (choose (list 1 2 3 4 5 6))))
      (make-cloud (vec2 (random 200) (random 100))
		  (- (+ 50 (random 50)))
		  (find-image (string-append "sprites/cloud-" v ".png"))
		  (find-image (string-append "sprites/scloud-" v ".png")))))
   300 200 'calm 0))
  
(define (window-update w delta nest)
  (make-window
   (window-wasp w)
   (window-env w)
   ;; stop with clouds moving if we are mating
   (if (eq? (wasp-state (window-wasp w)) 'state-mating)
       (window-clouds w)
       (map 
	(lambda (cloud)
	  (cloud-update cloud delta (entity-facing (window-wasp w))))
	(window-clouds w)))
   (window-w w)
   (window-h w)
   ;; get current weather from nest here
   (nest-weather nest)
   (+ (window-time w) delta)))

(define (window-render w ctx pos)
  ;; set up clipping
  (ctx.save)
  (ctx.beginPath)
  (ctx.rect (vx pos) (vy pos) (window-w w) (window-h w))
  (ctx.clip)
  (if (eq? (window-weather w) 'stormy)
      (set! ctx.fillStyle "#122748") ;; inverted highlight2 
      (set! ctx.fillStyle highlight2-col))
  (ctx.fillRect (vx pos) (vy pos) (window-w w) (window-h w))

  (for-each 
   (lambda (c)
     (cloud-render c ctx pos (window-weather w)))
   (window-clouds w))
  
  ;; position wasp properly
  (cond
   ((eq? (wasp-state (window-wasp w)) 'state-mating)
    0)
   
   ((or (eq? (wasp-state (window-wasp w)) 'state-dying)
	(eq? (wasp-state (window-wasp w)) 'state-died))
    (entity-render
     (entity-modify-pos
      (window-wasp w)
      (vadd
       pos
       (vec2 150
	     ;; use the state timer to move drop the
	     ;; wasp out of the frame as it dies
	     (+ 90 (* 300 (entity-timer (window-wasp w))))))) ctx))
   (else
    (entity-render
     (entity-modify-pos
      (window-wasp w) (vadd pos (vec2 150 90))) ctx)))  

  ;; draw swatter 
  (when (eq? (window-weather w) 'swatted)
	(ctx.save)
	(ctx.translate (- (vx pos) 50) (- (vy pos) 100))	
	(ctx.translate 28 270)	
	(ctx.rotate (* 0.5 (sin (* (window-time w) 22))))	
	(ctx.translate -28 -270)	
	(ctx.drawImage (find-image "sprites/swatted.png") 0 0)
	(ctx.restore))

  ;; draw rain as an animated repeating pattern
  (when (eq? (window-weather w) 'stormy)
	(let ((pattern-fill
	       (ctx.createPattern
		(find-image "sprites/rain.png") "repeat"))
	      (offx (* -500 (window-time w)))
	      (offy (* 750 (window-time w))))
	  (ctx.save)
	  (ctx.translate offx offy)
	  (set! ctx.fillStyle pattern-fill)
	  (ctx.fillRect
	   (- (vx pos) offx)
	   (- (vy pos) offy)
	   (window-w w) (window-h w)))
	(ctx.restore)
	(let ((pattern-fill
	       (ctx.createPattern
		(find-image "sprites/rain2.png") "repeat"))
	      (offx (* -320 (window-time w)))
	      (offy (* 515 (window-time w))))
	  (ctx.translate offx offy)
	  (set! ctx.fillStyle pattern-fill)
	  (ctx.fillRect
	   (- (vx pos) offx)
	   (- (vy pos) offy)
	   (window-w w) (window-h w))))

  (when (and (eq? (window-weather w) 'stormy)
	     (< (rndf) 0.01))
	(ctx.drawImage (find-image "sprites/lightning.png")
		       (vx pos) (vy pos)))
  
  (when (eq? (wasp-state (window-wasp w)) 'state-mating)

	(ctx.save)
	(ctx.translate (+ (vx pos) 95) (+ (vy pos) 25))
	(ctx.translate 70 70)
	(ctx.rotate (* 0.5 (sin (* (window-time w) 3))))
	(ctx.translate -70 -70)
	(ctx.drawImage (find-image "sprites/heart.png") 0 0)
	(ctx.restore)

	(entity-render
	 (entity-modify-pos
	  (window-wasp w) (vadd pos (vec2 70 90))) ctx)
	
	(entity-render
	 (entity-modify-pos
	  (entity-modify-facing
	   (window-wasp w) 'left)
	  (vadd pos (vec2 250 90))) ctx)
	
	)
  
  (ctx.restore))

(define (make-window-stack windows)
  (list windows))

(define (window-stack-windows s) (list-ref s 0))

(define (window-stack-update-wasp s wasp)
  (map
   (lambda (w)
     (if (entity-eq? wasp (window-wasp w))
	 (window-modify-wasp w wasp)
	 w))
   s))

(define (window-stack-remove s wasp)
  (filter
   (lambda (w)
     (not (entity-eq? wasp (window-wasp w))))
   s))

(define (window-stack-update s delta nest)
  (make-window-stack
   (foldl
    (lambda (window r)
      ;; remove dead wasps at the same time as updating...
      (if (or (eq? (wasp-state (window-wasp window)) 'state-died)
	      (eq? (wasp-state (window-wasp window)) 'state-mated))
	  r (append r (list (window-update window delta nest)))))
    '()
    (window-stack-windows s))))

(define (window-stack-render s ctx)
  (set! ctx.fillStyle highlight-col)
  (ctx.fillRect 1265 0 400 screen-height)
  (set! ctx.fillStyle text-col)
  (set! ctx.font "normal 35pt pompiere")
  (ctx.fillText "FORAGERS" 1355 50)
  
  (index-for-each
   (lambda (i window)
     (window-render window ctx (vec2 1285 (+ (* i 210) 60))))
   (window-stack-windows s)))





