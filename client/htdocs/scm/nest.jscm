;; -*- mode: scheme; -*-

(define cell-code-unbuilt 0)
(define cell-code-avail 1)
(define cell-code-occupied 2)

(define cell-size-x 12)
(define cell-size-y 5)

(define (make-cell pos logical code) (list pos logical code))
(define (cell-pos c) (list-ref c 0))
(define (cell-logical c) (list-ref c 1))
(define (cell-code c) (list-ref c 2))
(define (cell-modify-code c v) (list-replace c 2 v))

(define (generate-cells w h)
  (foldl
   (lambda (c r)
     (append c r))
   '()
   (build-list
    h (lambda (y)     
	(build-list
	 w (lambda (x)
	     (make-cell 
	      (vec2 (+ (* x 120) 50)
		    (+ (* y 150) 50 
		       (if (zero? (modulo x 2)) 75 0)))
	      (vec2 x y)
	      (if (and (eq? x 6) (eq? y 2))
		  cell-code-avail
		  cell-code-unbuilt))))))))

(define (make-nest energy location time-of-year wasps menu cells) 
  (list energy location time-of-year wasps menu cells))

(define (nest-energy n) (list-ref n 0))
(define (nest-location n) (list-ref n 1))
(define (nest-time-of-year n) (list-ref n 2))
(define (nest-wasps n) (list-ref n 3))
(define (nest-menu n) (list-ref n 4))
(define (nest-cells n) (list-ref n 5))

(define (nest-wasps-update n delta)
  (map
   (lambda (wasp)
     (entity-update (wasp-update wasp delta) delta))
   (nest-wasps n)))

(define (nest-wasps-click n mx my)
  (foldl
   (lambda (w r)
     (if (and (not r) 
	      (in-rect? 
	       (vx (entity-pos w))
	       (vy (entity-pos w))
	       (vx (entity-sprite-size w))
	       (vy (entity-sprite-size w))
	       mx my))
	 w r))
   #f
   (nest-wasps n)))

(define (nest-find-built-cell n)
  (foldl
   (lambda (c r)
     (if (and (not r) (not (eq? (cell-code c) cell-code-unbuilt)))
	 c r))
   #f
   (shuffle (nest-cells n))))

(define (cell-pos->index pos)
  (+ (min (- cell-size-x 1) (vx pos))
     (* (min (- cell-size-y 1) (vy pos)) 12)))

(define (cell-nindexes cell)
  (let ((x (vx (cell-logical cell)))
	(y (vy (cell-logical cell))))
    ;; bloomin hexagons...
    (append
     (list
      (cell-pos->index (vec2 x (+ y 1)))
      (cell-pos->index (vec2 x (- y 1)))
      (cell-pos->index (vec2 (+ x 1) y))
      (cell-pos->index (vec2 (- x 1) y)))
     (if (zero? (modulo x 2))
	 (list
	  (cell-pos->index (vec2 (+ x 1) (- y 1)))
	  (cell-pos->index (vec2 (- x 1) (- y 1))))
	 (list
	  (cell-pos->index (vec2 (+ x 1) (+ y 1)))
	  (cell-pos->index (vec2 (- x 1) (+ y 1))))))))

(define (nest-find-unbuilt-cell n timeout)
  (if (> timeout 100) 
      #f
      (let ((built (nest-find-built-cell n)))
	(let ((candidate (list-ref (nest-cells n) (choose (cell-nindexes built)))))
	  (if (eq? (cell-code candidate) cell-code-unbuilt)
	      candidate
	      (nest-find-unbuilt-cell n (+ timeout 1)))))))

(define (nest-wasps-update-cells n)
  (foldl
   (lambda (wasp cells)
     (wasp-update-cells wasp cells))
   (nest-cells n)
   (nest-wasps n)))

(define (nest-update-wasps-from-menu n menu) 
  ;; don't take menu from nest, as this is the updated one
  (map
   (lambda (wasp)
     (if (eq? (entity-id wasp) (menu-entity-id menu))
	 ;; need to pass in nest for cell information
	 (wasp-update-action wasp (menu-selection menu) n)
	 wasp))
   (nest-wasps n)))

(define (nest-update-mouse n state mx my)
  (let ((wasp (nest-wasps-click n mx my)))
    (let ((menu
	   (if (or (not wasp) 
		   (eq? (entity-id wasp) (menu-entity-id (nest-menu n))))
	       (menu-update-click (nest-menu n) mx my)
	       (build-menu
		(entity-pos wasp)
		#t
		(wasp-build-menu-options wasp)
		#f 
		(entity-id wasp)))))

    (make-nest
     (nest-energy n)
     (nest-location n)
     (nest-time-of-year n)
     (if (menu-selection menu)
	 (nest-update-wasps-from-menu n menu) 
	 (nest-wasps n))
     ;; need to clear the menu to stop it retriggering
     (if (menu-selection menu)
	 (menu-clear menu)
	 menu)
     (nest-cells n)))))

(define (nest-update n delta)
  (make-nest
   (nest-energy n)
   (nest-location n)
   (nest-time-of-year n)
   (nest-wasps-update n delta)
   (nest-menu n)
   (nest-wasps-update-cells n)))

(define (nest-render n ctx)
  (ctx.drawImage (find-image "backgrounds/temperate-city.png") 0 0)
  (for-each
   (lambda (cell)
     (when (not (eq? (cell-code cell) cell-code-unbuilt))
	   (ctx.drawImage (find-image "sprites/hex.png") 
			  (+ (vx (cell-pos cell) 10) 80)
			  (+ (vy (cell-pos cell)) 20))))
   (nest-cells n))
  (entity-list-render (nest-wasps n) ctx)
  (menu-render (nest-menu n)))
