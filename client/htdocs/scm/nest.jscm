;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define nest-year-length (local-get-param "wasp-game" "nest-year-length"))
(define nest-forage-cost (local-get-param "wasp-game" "nest-forage-cost"))
(define nest-build-cell-cost (local-get-param "wasp-game" "nest-build-cell-cost"))
(define nest-lay-egg-cost (local-get-param "wasp-game" "nest-lay-egg-cost"))
(define nest-tend-brood-cost (local-get-param "wasp-game" "nest-tend-brood-cost"))
(define nest-defend-nest-cost (local-get-param "wasp-game" "nest-defend-nest-cost"))
(define nest-forage-benefit (local-get-param "wasp-game" "nest-forage-benefit"))
(define event-start-time (local-get-param "wasp-game" "event-start-time"))
(define event-probability (local-get-param "wasp-game" "event-probability"))

(define (time->season time)
  (cond
   ((< time (/ nest-year-length 4)) 'spring)
   ((and (> time (/ nest-year-length 4)) 
	 (< time (* (/ nest-year-length 4) 2))) 'summer)
   ((and (> time (* (/ nest-year-length 4) 2)) 
	 (< time (* (/ nest-year-length 4) 3))) 'autumn)
   (else 'winter)))

(define (make-nest energy location time-of-year wasps menu cells window-stack event events weather) 
  (list energy location time-of-year wasps menu cells window-stack event events weather))

(define (nest-energy n) (list-ref n 0))
(define (nest-modify-energy n s) (list-replace n 0 s))
(define (nest-location n) (list-ref n 1))
(define (nest-time-of-year n) (list-ref n 2))
(define (nest-modify-time-of-year n s) (list-replace n 2 s))
(define (nest-wasps n) (list-ref n 3))
(define (nest-modify-wasps n s) (list-replace n 3 s))
(define (nest-menu n) (list-ref n 4))
(define (nest-cells n) (list-ref n 5))
(define (nest-window-stack n) (list-ref n 6))
(define (nest-modify-window-stack n s v) (list-replace n 6 v))
(define (nest-event n) (list-ref n 7))
(define (nest-modify-event n s) (list-replace n 7 s))
(define (nest-events n) (list-ref n 8))
(define (nest-weather n) (list-ref n 9))
(define (nest-modify-weather n s) (list-replace n 9 s))

(define (nest-wasps-update n delta)
  (map
   (lambda (wasp)
     (entity-update (wasp-update wasp delta n) delta))
   (nest-wasps n)))

(define (nest-wasps-click n mx my)
  (foldl
   (lambda (w r)
     (if (and (not r) 
	      (not (eq? (wasp-state w) 'state-pupa))
	      (not (eq? (wasp-state w) 'state-tended-pupa))
	      (in-rect? 
	       (- (vx (entity-pos w)) 150)
	       (- (vy (entity-pos w)) 150)
	       (vx (entity-sprite-size w))
	       (vy (entity-sprite-size w))
	       mx my))
	 w r))
   #f
   (nest-wasps n)))

(define (nest-wasp-present? n pos)
  (foldl
   (lambda (w r)
     (if (and (not r) 
	      (not (eq? (wasp-state w) 'state-pupa))
	      (not (eq? (wasp-state w) 'state-untended-pupa))
	      (v2eq? (wasp-walk-to w) pos))
	 #t r))
   #f
   (nest-wasps n)))

(define (nest-find-built-cell n)
  (foldl
   (lambda (c r)
     (if (and (not r) (not (eq? (cell-code c) cell-code-unbuilt))
	      (not (nest-wasp-present? n (cell-pos c))))
	 c r))
   #f
   (shuffle (nest-cells n))))

(define (nest-find-empty-cell n)
  (foldl
   (lambda (c r)
     (if (and (not r) (eq? (cell-code c) cell-code-empty)
	      (not (nest-wasp-present? n (cell-pos c))))
	 c r))
   #f
   (shuffle (nest-cells n))))

(define (nest-find-any-cell n)
  (foldl
   (lambda (c r)
     (if (and (not r) (not (nest-wasp-present? n (cell-pos c))))
	 c r))
   #f
   (shuffle (nest-cells n))))

(define (in-list? i l)
  (foldl
   (lambda (e r)
     (if (and (not r) (eq? i e))
	 #t r))
   #f l))

(define (nest-decimate n p state-list)
  (nest-modify-wasps
   n (map
      (lambda (w)
	(if (and (< (rndf) p) (in-list? (wasp-state w) state-list))
	    (wasp-modify-state w 'state-start-dying)
	    w))
      (nest-wasps n))))	

(define (nest-find-wasp-in-state n state)
  (foldl
   (lambda (w r)
     (if (and (not r) (eq? (wasp-state w) state)
	      (not (nest-wasp-present? n (wasp-walk-to w))))
	 w r))
   #f
   (shuffle (nest-wasps n))))

(define (nest-find-unbuilt-cell n timeout)
  (if (> timeout 100) 
      #f
      (let ((built (nest-find-built-cell n)))
	(let ((candidate (list-ref (nest-cells n) (choose (cell-nindexes built)))))
	  (if (eq? (cell-code candidate) cell-code-unbuilt)
	      candidate
	      (nest-find-unbuilt-cell n (+ timeout 1)))))))

(define (nest-wasps-update-cells n)
  (foldl
   (lambda (wasp cells)
     (wasp-update-cells wasp cells))
   (nest-cells n)
   (nest-wasps n)))

(define (nest-wasps-update-wasps wasps)
  (foldl
   (lambda (wasp wasps)
     (wasp-update-wasps wasp wasps))
   wasps
   wasps))

(define (nest-update-wasps-from-menu n menu) 
  ;; don't take menu from nest, as this is the updated one
  (map
   (lambda (wasp)
     (if (eq? (entity-id wasp) (menu-entity-id menu))
	 ;; need to pass in nest for cell information
	 (wasp-update-action wasp (menu-selection menu) n)
	 wasp))
   (nest-wasps n)))

(define (nest-update-from-wasps n)
  (foldl
   (lambda (wasp r)
     (cond
      ((eq? (wasp-state wasp) 'state-forage-end)
       (nest-modify-energy n (+ (nest-energy n) nest-forage-benefit)))
      ((eq? (wasp-state wasp) 'state-died)
       (nest-modify-wasps n (entity-list-remove (nest-wasps n) wasp)))
      (else r)))
   n
   (nest-wasps n)))
       
(define (nest-update-from-action n action)
  (cond
   ((eq? action 'forage) (nest-modify-energy n (+ (nest-energy n) nest-forage-cost)))
   ((eq? action 'build-cell) (nest-modify-energy n (+ (nest-energy n) nest-build-cell-cost)))
   ((eq? action 'lay-egg) (nest-modify-energy n (+ (nest-energy n) nest-lay-egg-cost)))
   ((eq? action 'tend-brood) (nest-modify-energy n (+ (nest-energy n) nest-tend-brood-cost)))
   ((eq? action 'defend-nest) (nest-modify-energy n (+ (nest-energy n) nest-defend-nest-cost)))
   (else n)))

(define (nest-update-from-event n delta)
  (let ((e (nest-event n)))
    (if e 
	;; check an existing event
	(let ((fn (event-fn e))) 
	  (fn
	   (nest-modify-event n (if (< (event-time-left e) 0) #f e))
	   delta
	   ;; tell function if this is the last event update
	   (if (< (event-time-left e) 0) 'last 'mid)))
	;; time for a new event?
	(if (and (> (nest-time-of-year n) event-start-time)
		 (< (rndf) (* event-probability delta)))	    
	    (let ((event-builder (choose (nest-events n))))
	      (let ((new-event (event-builder)))
		(let ((fn (event-fn new-event))) 
		  ;; time to run the event function on the whole nest
		  ;; to do whatever it wants to do...
		  (fn
		   (nest-modify-event
		    n (event-modify-time-left
		       new-event
		       (event-duration new-event)))
		   delta 'first))))
	    ;; no event exists
	    (nest-modify-event n #f)))))

(define (nest-update-mouse n state mx my)
  (let ((menu (menu-update-click (nest-menu n) mx my)))
    (let ((wasp (if (menu-selection menu)
		    #f
		    (nest-wasps-click n mx my))))
      (nest-update-from-action
       (make-nest
	(nest-energy n)
	(nest-location n)
	(nest-time-of-year n)
	(if (menu-selection menu)
	    (nest-update-wasps-from-menu n menu) 
	    (nest-wasps n))
	;; if there is a wasp clicked on, and it's not the current one
	(if (and wasp
		 (not (eq? (wasp-state wasp) 'state-pupa))
		 ;;(not (eq? (entity-id wasp) (menu-entity-id (nest-menu n))))
		 )
	    (build-menu
	     (v2add (entity-pos wasp) (vec2 -100 -300)) #t
	     (wasp-build-menu-options wasp n) #f 
	     (entity-id wasp))
	    ;; need to clear the menu to stop it retriggering
	    (if (menu-selection menu)
		(menu-clear menu)
		menu))
	(nest-cells n)
	(nest-window-stack n)
	(nest-event n)
	(nest-events n)
	(nest-weather n))
       (menu-selection menu)))))


;; update just the window stack, and add new ones if required
(define (nest-update-window-stack nest delta)
  (window-stack-update
   (make-window-stack
    (foldl 
     (lambda (wasp r)
       (cond 
	((eq? (wasp-state wasp) 'state-forage-start)
	 (append r (list (build-window wasp))))
	((eq? (wasp-state wasp) 'state-forage-return)
	 (window-stack-return r wasp))
	((eq? (wasp-state wasp) 'state-forage-end)
	 (window-stack-remove r wasp))
	(else r)))
     (window-stack-windows (nest-window-stack nest))
     (nest-wasps nest)))
   delta nest))

(define (nest-update n delta)
  (nest-update-from-event
   (nest-update-from-wasps
    (make-nest
     (nest-energy n)
     (nest-location n)
     (+ (nest-time-of-year n) delta)
     (nest-wasps-update-wasps
      (nest-wasps-update n delta))
     (nest-menu n)
     (nest-wasps-update-cells n)
     (nest-update-window-stack n delta)    
     (event-update (nest-event n) delta)
     (nest-events n)
     (nest-weather n)))
   delta))

(define (nest-render n ctx)
  (ctx.drawImage (find-image "backgrounds/temperate-forest.png") 0 0)
  
  (for-each
   (lambda (cell)
     (when (not (eq? (cell-code cell) cell-code-unbuilt))
	   (let ((img (cell-img cell)))
	     (ctx.drawImage
	      (find-image "sprites/hex-drop.png")
	      (- (vx (cell-pos cell)) (/ img.width 2))
	      (- (vy (cell-pos cell)) (/ img.height 2))))))
   (nest-cells n))

  (for-each
   (lambda (cell)
     (when (not (eq? (cell-code cell) cell-code-unbuilt))
	   (let ((img (cell-img cell)))
	     (ctx.drawImage
	      img
	      (- (vx (cell-pos cell)) (/ img.width 2))
	      (- (vy (cell-pos cell)) (/ img.height 2))))))
   (nest-cells n))
  (entity-list-render (nest-wasps n) ctx)
  (window-stack-render (nest-window-stack n) ctx)
  (menu-render (nest-menu n))
  (set! ctx.font "normal 25pt pompiere")
  (set! ctx.fillStyle "#fff")
  (set! ctx.globalAlpha 0.8)
  (ctx.fillRect 0 0 800 70)
  (set! ctx.globalAlpha 1.0)
  (set! ctx.fillStyle "#000")
  (ctx.fillText (string-append "Energy: " (nest-energy n)) 10 50)
  (ctx.fillText (string-append "Game time: " (Math.floor (nest-time-of-year n))) 200 50)
  (ctx.fillText (string-append "Season: " (time->season (nest-time-of-year n))) 400 50)
  (ctx.fillText (string-append "Wasps: " (length (nest-wasps n))) 600 50)
  
  (when (nest-event n)
	(event-render n ctx))
  )
