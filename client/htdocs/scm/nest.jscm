;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define nest-year-length (local-get-param "wasp-game" "nest-year-length"))
(define nest-forage-cost (local-get-param "wasp-game" "nest-forage-cost"))
(define nest-build-cell-cost (local-get-param "wasp-game" "nest-build-cell-cost"))
(define nest-lay-egg-cost (local-get-param "wasp-game" "nest-lay-egg-cost"))
(define nest-tend-brood-cost (local-get-param "wasp-game" "nest-tend-brood-cost"))
(define nest-defend-nest-cost (local-get-param "wasp-game" "nest-defend-nest-cost"))
(define nest-forage-benefit (local-get-param "wasp-game" "nest-forage-benefit"))
(define nest-forage-variation (local-get-param "wasp-game" "nest-forage-variation"))
(define nest-energy-drain (local-get-param "wasp-game" "nest-energy-drain"))
(define event-start-time (string->number (local-get-param "wasp-game" "event-start-time")))
(define event-probability (local-get-param "wasp-game" "event-probability"))
(define nest-reproductive-threshold (local-get-param "wasp-game" "nest-reproductive-threshold"))

(define (nest-scores new-nests num-wasps-hatched cells-built
		     num-reproductives-hatched energy-foraged)
  (list new-nests num-wasps-hatched cells-built
	num-reproductives-hatched energy-foraged))

(define (nest-scores-new-nests n) (list-ref n 0))
(define (nest-scores-modify-new-nests n s) (list-replace n 0 s))
(define (nest-scores-num-wasps-hatched n) (list-ref n 1))
(define (nest-scores-modify-num-wasps-hatched n s) (list-replace n 1 s))

(define time-between-events
  (/ (- nest-year-length event-start-time) (+ (length (build-wasp-game-events)) 1)))

(define (time->season time)
  (cond
   ((< time (/ nest-year-length 4)) 'spring)
   ((and (> time (/ nest-year-length 4)) 
	 (< time (* (/ nest-year-length 4) 2))) 'summer)
   ((and (> time (* (/ nest-year-length 4) 2)) 
	 (< time (* (/ nest-year-length 4) 3))) 'autumn)
   (else 'winter)))

(define (make-nest energy location time-of-year wasps menu cells window-stack event next-event-time events weather info-display energy-mult scores game-id) 
  (list energy location time-of-year wasps menu cells window-stack event next-event-time events weather info-display energy-mult scores game-id))

(define (make-new-nest game-id time)
  (make-nest 
   (string->number (local-get-param "wasp-game" "nest-start-energy"))
   'city 0 
   (build-list
    (string->number (local-get-param "wasp-game" "nest-start-wasps"))
    (lambda (_)
      (make-wasp default-capabilities)))
   (build-menu 
    (vec2 100 100) #f 
    (list)
    #f 0)
   (generate-cells cell-size-x cell-size-y)
   (make-window-stack (list))
   #f
   event-start-time
   (build-wasp-game-events)
   'calm
   (make-info-display
    (list
     ))
   1
   (nest-scores 0 0 0 0 0)
   game-id))

(define (nest-energy n) (list-ref n 0))
(define (nest-modify-energy n s) (list-replace n 0 s))
(define (nest-location n) (list-ref n 1))
(define (nest-time-of-year n) (list-ref n 2))
(define (nest-modify-time-of-year n s) (list-replace n 2 s))
(define (nest-wasps n) (list-ref n 3))
(define (nest-modify-wasps n s) (list-replace n 3 s))
(define (nest-menu n) (list-ref n 4))
(define (nest-cells n) (list-ref n 5))
(define (nest-window-stack n) (list-ref n 6))
(define (nest-modify-window-stack n s v) (list-replace n 6 v))
(define (nest-event n) (list-ref n 7))
(define (nest-modify-event n s) (list-replace n 7 s))
(define (nest-next-event-time n) (list-ref n 8))
(define (nest-modify-next-event-time n s) (list-replace n 8 s))
(define (nest-events n) (list-ref n 9))
(define (nest-modify-events n s) (list-replace n 9 s))
(define (nest-weather n) (list-ref n 10))
(define (nest-modify-weather n s) (list-replace n 10 s))
(define (nest-info-display n) (list-ref n 11))
(define (nest-modify-info-display n s) (list-replace n 11 s))
(define (nest-energy-mult n) (list-ref n 12))
(define (nest-modify-energy-mult n s) (list-replace n 12 s))
(define (nest-scores n) (list-ref n 13))
(define (nest-modify-scores n s) (list-replace n 13 s))
(define (nest-game-id n) (list-ref n 14))

(define (nest-wasps-update n delta)
  (map
   (lambda (wasp)
     (entity-update (wasp-update wasp delta n) delta))
   (nest-wasps n)))

(define (nest-wasps-select n mx my)
  (foldl
   (lambda (w r)
     (if (and (not (eq? (wasp-state w) 'state-egg))
	      (not (eq? (wasp-state w) 'state-tended-egg))
	      (in-rect? 
	       (- (vx (entity-pos w)) 100)
	       (- (vy (entity-pos w)) 75)
	       (vx (entity-sprite-size w))
	       (vy (entity-sprite-size w))
	       mx my))
	 (cons w r) r))
   '()
   (nest-wasps n)))

(define (nest-wasps-click n mx my)
  (cadr
   (foldl
    (lambda (w r)
      (let ((closest (car r))
	    (dist (v2dist (vec2 mx my) (entity-pos w))))
	(if (> closest dist)
	    (list dist w)
	    r)))
    (list 99999 #f)
    (nest-wasps-select n mx my))))

(define (nest-wasp-present? n pos)
  (foldl
   (lambda (w r)
     (if (and (not r) 
	      (not (eq? (wasp-state w) 'state-egg))
	      (not (eq? (wasp-state w) 'state-tended-egg))
	      (v2eq? (entity-walk-to w) pos)
	      )
	 #t r))
   #f
   (nest-wasps n)))

(define (nest-egg-present? n pos)
  (foldl
   (lambda (w r)
     (if (and (not r) 
	      (or
	       (eq? (wasp-state w) 'state-egg)
	       (eq? (wasp-state w) 'state-tended-egg))
	      (v2eq? (entity-walk-to w) pos)
	      )
	 #t r))
   #f
   (nest-wasps n)))

(define (nest-find-built-cell n)
  (cells-find-built-cell (nest-cells n)))

(define (nest-find-empty-cell n)
  (foldl
   (lambda (c r)
     (if (and (not r) (eq? (cell-code c) cell-code-empty)
	      ;; used for finding cells to lay, so reject
	      ;; ones that might already be laying - not great?
	      (not (nest-wasp-present? n (cell-pos c))))
	 c r))
   #f
   (shuffle (nest-cells n))))

(define (nest-find-occupied-cell n)
  (foldl
   (lambda (c r)
     (if (and (not r) (eq? (cell-code c) cell-code-empty)
	      (nest-egg-present? n (cell-pos c)))
	 c r))
   #f
   (shuffle (nest-cells n))))

(define (nest-find-any-cell n)
  (foldl
   (lambda (c r)
     (if (and (not r) (not (nest-wasp-present? n (cell-pos c))))
	 c r))
   #f
   (shuffle (cells-surrounding-built (nest-cells n)))))

;;(shuffle (nest-cells n))))

(define (in-list? i l)
  (foldl
   (lambda (e r)
     (if (and (not r) (eq? i e))
	 #t r))
   #f l))

(define (nest-decimate n p state-list)
  (nest-modify-wasps
   n (map
      (lambda (w)
	(if (and (< (rndf) p) (in-list? (wasp-state w) state-list))
	    (wasp-modify-state w 'state-start-dying)
	    w))
      (nest-wasps n))))	

(define (nest-find-wasp-in-state n state)
  (foldl
   (lambda (w r)
     (if (and (not r) (eq? (wasp-state w) state)
	      ;; (not (nest-wasp-present? n (entity-walk-to w)))
	      )
	 w r))
   #f
   (shuffle (nest-wasps n))))

(define (nest-wasps-foraging? n)
  (foldl
   (lambda (w r)
     (if (and (not r) (wasp-foraging? w))
	 #t r))
   #f
   (nest-wasps n)))

(define (nest-find-egg n)
  (foldl
   (lambda (w r)
     (if (and (not r)
	      (or (eq? (wasp-state w) 'state-egg)
		  (eq? (wasp-state w) 'state-tended-egg)))
	 w r))
   #f
   (shuffle (nest-wasps n))))

(define (nest-find-worker-egg n)
  (foldl
   (lambda (w r)
     (if (and (not r)
	      (eq? (wasp-parent w) 'worker)
	      (or (eq? (wasp-state w) 'state-egg)
		  (eq? (wasp-state w) 'state-tended-egg)))
	 w r))
   #f
   (shuffle (nest-wasps n))))

(define (nest-find-unbuilt-cell n)
  ;;(cells-find-unbuilt (nest-cells n) 0)
  (cells-find-optimal (nest-cells n)))

(define (nest-wasps-update-cells n)
  (foldl
   (lambda (wasp cells)
     (wasp-update-cells wasp cells))
   (nest-cells n)
   (nest-wasps n)))

(define (nest-wasps-update-wasps wasps)
  (foldl
   (lambda (wasp wasps)
     (wasp-update-wasps wasp wasps))
   wasps
   wasps))

(define (nest-update-wasps-from-menu n menu) 
  ;; don't take menu from nest, as this is the updated one
  (map
   (lambda (wasp)
     (if (eq? (entity-id wasp) (menu-entity-id menu))
	 ;; need to pass in nest for cell information
	 (wasp-update-action wasp (menu-selection menu) n)
	 wasp))
   (nest-wasps n)))

(define (nest-update-from-wasps n time)
  (foldl
   (lambda (wasp r)
     (cond
      ((eq? (wasp-state wasp) 'state-egg)
       (if (> (entity-timer wasp) (/ wasp-egg-time 2))
	   (nest-add-info 
	    r (string-append "DON'T FORGET TO TEND YOUR BROOD")
	    'tend-warning time)
	   r))
      ((eq? (wasp-state wasp) 'state-forage-end)
       (let ((energy 
	      (+ (* nest-forage-benefit (nest-energy-mult n))
		 (* (rndf) nest-forage-variation))))
	 (nest-add-info 
	  (nest-modify-energy n (+ (nest-energy n) energy))
	  (string-append
	   "FORAGER RETURNED WITH A " 
	   (cond
	    ((eq? (wasp-carrying wasp) 'spider) "SPIDER")
	    ((eq? (wasp-carrying wasp) 'caterpillar) "CATERPILLAR")
	    ((eq? (wasp-carrying wasp) 'fly) "FLY")
	    (else "???"))
	   " WORTH " (floor energy) " ENERGY POINTS")
	  'allow-dup time)))
      ((eq? (wasp-state wasp) 'state-died)
       (nest-add-info 
	(nest-modify-wasps n (entity-list-remove (nest-wasps n) wasp))
	(string-append "A WASP HAS DIED, " (length (nest-wasps n)) " WASPS LEFT")
	'allow-dup time))
      ((eq? (wasp-state wasp) 'state-mated)
       (nest-modify-new-nest-score
	(nest-add-info 
	 (nest-modify-wasps n (entity-list-remove (nest-wasps n) wasp))
	 (string-append "CONGRATS: A NEW NEST HAS BEEN FOUNDED")
	 'allow-dup time)
	(+ (nest-new-nest-score n) 1)))       
      ((eq? (wasp-state wasp) 'state-died-egg)
       (nest-add-info 
	(nest-modify-wasps n (entity-list-remove (nest-wasps n) wasp))
	(string-append "AN EGG HAS DIED AS IT WAS NOT TENDED")
	'allow-dup time))
      ((eq? (wasp-state wasp) 'state-taken-egg)
       (nest-add-info 
	(nest-modify-wasps n (entity-list-remove (nest-wasps n) wasp))
	(string-append "YOU BROOD IS BEING STOLEN")
	'stolen-egg time))
      (else r)))
   n
   (nest-wasps n))))

(define (nest-energy-for-action action)
  (cond
   ((eq? action 'forage) nest-forage-cost)
   ((eq? action 'build-cell) nest-build-cell-cost)
   ((eq? action 'lay-egg) nest-lay-egg-cost)
   ((eq? action 'tend-brood) nest-tend-brood-cost)
   ((eq? action 'defend-nest) nest-defend-nest-cost)
   (else 0)))

(define (nest-can-do-action n action)
  (>= (nest-energy n) (- (nest-energy-for-action action))))

(define (nest-update-from-action n action)
  (nest-modify-energy n (+ (nest-energy n) (nest-energy-for-action action))))

(define (nest-pick-new-event n delta)
  (let ((new-events (shuffle (nest-events n))))
    (if (null? new-events)
	;; no more events!
	(nest-modify-next-event-time (nest-modify-event n #f) 9999999)
	;; run new event
	(let ((event-builder (car new-events)))
	  (let ((new-event (event-builder)))
	    (let ((event-cond (event-cond-fn new-event))) 
	      ;; can we run this event at the moment?
	      (if (event-cond n) 			 		       
		  (let ((fn (event-fn new-event))) 
		    ;; time to run the event function on the whole nest
		    ;; to do whatever it wants to do, and remove this event
		    ;; from the list
		    (nest-modify-next-event-time
		     (nest-modify-events
		      (fn (nest-modify-event n new-event) delta 'first)
		      (cdr new-events))
		     ;; set the time for the next event
		     (+ (nest-next-event-time n)
			time-between-events)))		
		  (nest-modify-next-event-time
		   (nest-modify-event n #f)
		   (+ (nest-next-event-time n) 5))))))))) ;; try again in 5 secs

(define (nest-update-from-event n delta)
  (let ((e (nest-event n)))
    (if e 
	;; check an existing event
	(let ((fn (event-fn e))) 
	  (fn
	   (nest-modify-event n (if (< (event-time-left e) 0) #f e))
	   delta
	   ;; tell function if this is the last event update
	   (if (< (event-time-left e) 0) 'last 'mid)))
	;; no event, is it time for a new one?
	(if (> (nest-time-of-year n) (nest-next-event-time n))
	    (nest-pick-new-event n delta)
	    (nest-modify-event n #f)))))

(define (nest-update-mouse n state mx my)
  (let ((menu (menu-update-click (nest-menu n) mx my)))
    (let ((wasp (if (menu-selection menu)
		    #f
		    (nest-wasps-click n mx my))))
      (if (nest-can-do-action n (menu-selection menu)) 
	  (nest-update-from-action
	   (make-nest
	    (nest-energy n)
	    (nest-location n)
	    (nest-time-of-year n)
	    (if (menu-selection menu)
		(nest-update-wasps-from-menu n menu) 
		(nest-wasps n))
	    ;; if there is a wasp clicked on, and it's not the current one
	    (if (and wasp
		     (not (eq? (wasp-state wasp) 'state-egg))
		     ;;(not (eq? (entity-id wasp) (menu-entity-id (nest-menu n))))
		     )
		(build-menu
		 (v2add (entity-pos wasp) (vec2 -100 -300)) #t
		 (wasp-build-menu-options wasp n) #f 
		 (entity-id wasp))
		;; need to clear the menu to stop it retriggering
		(if (menu-selection menu)
		    (menu-clear menu)
		    menu))
	    (nest-cells n)
	    (nest-window-stack n)
	    (nest-event n)
	    (nest-next-event-time n)
	    (nest-events n)
	    (nest-weather n)
	    (nest-info-display n)
	    (nest-energy-mult n)
	    (nest-scores n)
	    (nest-game-id n))
	   (menu-selection menu))
	  n))))

;; update just the window stack, and add new ones if required
(define (nest-update-window-stack nest delta)
  (window-stack-update
   (make-window-stack
    (foldl 
     (lambda (wasp r)
       (cond 
	((eq? (wasp-state wasp) 'state-forage-start)
	 (append r (list (build-window wasp))))
	((eq? (wasp-state wasp) 'state-disperse-start)
	 (append r (list (build-window wasp))))
	((or (eq? (wasp-state wasp) 'state-forage)
	     (eq? (wasp-state wasp) 'state-forage-return)
	     (eq? (wasp-state wasp) 'state-disperse)
	     (eq? (wasp-state wasp) 'state-mating)
	     (eq? (wasp-state wasp) 'state-dying)
	     (eq? (wasp-state wasp) 'state-died)
	     (eq? (wasp-state wasp) 'state-mated))
	 ;; means all dying/dead wasps get 'pushed' to
	 ;; window stack - but they will be ignored if
	 ;; not foraging
	 (window-stack-update-wasp r wasp))
 	((eq? (wasp-state wasp) 'state-forage-end)
	 (window-stack-remove r wasp))
	(else r)))
     (window-stack-windows (nest-window-stack nest))
     (nest-wasps nest)))
   delta nest))

(define (nest-add-info n text id time)
  (nest-modify-info-display
   n (info-display-add
      (nest-info-display n)
      (make-info text id time))))

(define (nest-update-info-text n time)
  (info-display-update
   (cond
    ;;((< (length (nest-wasps n)) 2)
    ; (info-display-add
    ;;  (nest-info-display n)
    ;;  (make-info "ONLY ONE WASP REMAINS!" 'one-wasp time)))
    ((<= (nest-energy n) 0)
     (info-display-add
      (nest-info-display n)
      (make-info "YOUR NEST HAS NO ENERGY REMAINING" 'no-energy time)))
    ((<= (nest-energy n) 20)
     (info-display-add
      (nest-info-display n)
      (make-info "YOUR NEST HAS LOW ENERGY" 'low-energy time)))
    ((> (nest-time-of-year n) (- nest-year-length 20))
     (info-display-add
      (nest-info-display n)
      (make-info "IT'S NEARLY THE END OF THE WASP YEAR" 'year-end time)))
    (else (nest-info-display n)))
   time)))

(define (nest-update n time delta)
  (nest-update-from-event
   (nest-update-from-wasps
    (make-nest
     (- (nest-energy n)
	(* delta
	   (length (nest-wasps n))
	   nest-energy-drain)) ;; per wasp drain 
     (nest-location n)
     (+ (nest-time-of-year n) delta)
     (nest-wasps-update-wasps
      (nest-wasps-update n delta))
     (nest-menu n)
     (nest-wasps-update-cells n)
     (nest-update-window-stack n delta)    
     (event-update (nest-event n) n delta)
     (nest-next-event-time n)
     (nest-events n)
     (nest-weather n)
     (nest-update-info-text n time)
     (nest-energy-mult n)
     (nest-scores n)
     (nest-game-id n))
    time)
   delta))

(define (nest-render n ctx)
  (ctx.drawImage (find-image "backgrounds/temperate-forest.png") 0 0)
  
  (for-each
   (lambda (cell)
     (when (and (not (eq? (cell-code cell) cell-code-unbuilt))
		(not (eq? (cell-code cell) cell-code-building)))
	   (let ((img (cell-img cell)))
	     (ctx.drawImage
	      (find-image "sprites/hex-drop.png")
	      (- (vx (cell-pos cell)) (/ img.width 2))
	      (- (vy (cell-pos cell)) (/ img.height 2))))))
   (nest-cells n))

  (for-each
   (lambda (cell)
     (when (and (not (eq? (cell-code cell) cell-code-unbuilt))
		(not (eq? (cell-code cell) cell-code-building)))
	   (let ((img (cell-img cell)))
	     (ctx.drawImage
	      img
	      (- (vx (cell-pos cell)) (/ img.width 2))
	      (- (vy (cell-pos cell)) (/ img.height 2))))))
   (nest-cells n))

  ;; build and render the entity renderer
  (renderer-render!
   (renderer-add-entities
    (event-render-entities (renderer (list)) n)
    (nest-wasps n))
   ctx)

  (window-stack-render (nest-window-stack n) ctx)

  (set! ctx.font "normal 25pt pompiere")
  (set! ctx.fillStyle "#fff")
  (set! ctx.globalAlpha 0.8)
  (ctx.fillRect 0 0 800 70)
  (set! ctx.globalAlpha 1.0)
  (set! ctx.fillStyle "#000")
  (ctx.fillText (string-append "Energy: " (floor (nest-energy n))) 10 50)
  (ctx.fillText (string-append "Season: " (time->season (nest-time-of-year n))) 200 50)
  (ctx.fillText (string-append "Wasps: " (length (nest-wasps n))) 400 50)
  (ctx.fillText (string-append "New nests: " (nest-scores n)) 600 50)
  
  (info-display-render (nest-info-display n) ctx)
  (when (nest-event n) (event-render n ctx))
  
  (menu-render (nest-menu n)))
