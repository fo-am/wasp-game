;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define year-length 60)

(define (time->season time)
  (cond
   ((< time (/ year-length 4)) 'spring)
   ((and (> time (/ year-length 4)) (< time (* (/ year-length 4) 2))) 'summer)
   ((and (> time (* (/ year-length 4) 2)) (< time (* (/ year-length 4) 3))) 'autumn)
   (else 'winter)))

(define (make-nest energy location time-of-year wasps menu cells window-stack) 
  (list energy location time-of-year wasps menu cells window-stack))

(define (nest-energy n) (list-ref n 0))
(define (nest-modify-energy n s) (list-replace n 0 s))
(define (nest-location n) (list-ref n 1))
(define (nest-time-of-year n) (list-ref n 2))
(define (nest-modify-time-of-year n s) (list-replace n 2 s))
(define (nest-wasps n) (list-ref n 3))
(define (nest-menu n) (list-ref n 4))
(define (nest-cells n) (list-ref n 5))
(define (nest-window-stack n) (list-ref n 6))

(define (nest-wasps-update n delta)
  (map
   (lambda (wasp)
     (entity-update (wasp-update wasp delta n) delta))
   (nest-wasps n)))

(define (nest-wasps-click n mx my)
  (foldl
   (lambda (w r)
     (if (and (not r) 
	      (in-rect? 
	       (- (vx (entity-pos w)) 150)
	       (- (vy (entity-pos w)) 150)
	       (vx (entity-sprite-size w))
	       (vy (entity-sprite-size w))
	       mx my))
	 w r))
   #f
   (nest-wasps n)))

(define (nest-find-built-cell n)
  (foldl
   (lambda (c r)
     (if (and (not r) (not (eq? (cell-code c) cell-code-unbuilt)))
	 c r))
   #f
   (shuffle (nest-cells n))))

(define (nest-find-empty-cell n)
  (foldl
   (lambda (c r)
     (if (and (not r) (eq? (cell-code c) cell-code-empty))
	 c r))
   #f
   (shuffle (nest-cells n))))

(define (nest-find-any-cell n)
  (choose (nest-cells n)))

(define (cell-pos->index pos)
  (+ (min (- cell-size-x 1) (vx pos))
     (* (min (- cell-size-y 1) (vy pos)) 12)))

(define (cell-nindexes cell)
  (let ((x (vx (cell-logical cell)))
	(y (vy (cell-logical cell))))
    ;; bloomin hexagons...
    (append
     (list
      (cell-pos->index (vec2 x (+ y 1)))
      (cell-pos->index (vec2 x (- y 1)))
      (cell-pos->index (vec2 (+ x 1) y))
      (cell-pos->index (vec2 (- x 1) y)))
     (if (zero? (modulo x 2))
	 (list
	  (cell-pos->index (vec2 (+ x 1) (- y 1)))
	  (cell-pos->index (vec2 (- x 1) (- y 1))))
	 (list
	  (cell-pos->index (vec2 (+ x 1) (+ y 1)))
	  (cell-pos->index (vec2 (- x 1) (+ y 1))))))))

(define (nest-find-unbuilt-cell n timeout)
  (if (> timeout 100) 
      #f
      (let ((built (nest-find-built-cell n)))
	(let ((candidate (list-ref (nest-cells n) (choose (cell-nindexes built)))))
	  (if (eq? (cell-code candidate) cell-code-unbuilt)
	      candidate
	      (nest-find-unbuilt-cell n (+ timeout 1)))))))

(define (nest-wasps-update-cells n)
  (foldl
   (lambda (wasp cells)
     (wasp-update-cells wasp cells))
   (nest-cells n)
   (nest-wasps n)))

(define (nest-wasps-update-wasps wasps)
  (foldl
   (lambda (wasp wasps)
     (wasp-update-wasps wasp wasps))
   wasps
   wasps))

(define (nest-update-wasps-from-menu n menu) 
  ;; don't take menu from nest, as this is the updated one
  (map
   (lambda (wasp)
     (if (eq? (entity-id wasp) (menu-entity-id menu))
	 ;; need to pass in nest for cell information
	 (wasp-update-action wasp (menu-selection menu) n)
	 wasp))
   (nest-wasps n)))
  
(define (nest-update-mouse n state mx my)
  (let ((menu (menu-update-click (nest-menu n) mx my)))
    (let ((wasp (if (menu-selection menu)
		    #f
		    (nest-wasps-click n mx my))))
      (make-nest
       (nest-energy n)
       (nest-location n)
       (nest-time-of-year n)
       (if (menu-selection menu)
	   (nest-update-wasps-from-menu n menu) 
	   (nest-wasps n))
       ;; if there is a wasp clicked on, and it's not the current one
       (if (and wasp (not (eq? (entity-id wasp) (menu-entity-id (nest-menu n)))))
	   (build-menu
	    (v2add (entity-pos wasp) (vec2 -100 -300))
	    #t
	    (wasp-build-menu-options wasp)
	    #f 
	    (entity-id wasp))
	   ;; need to clear the menu to stop it retriggering
	   (if (menu-selection menu)
	       (menu-clear menu)
	       menu))
       (nest-cells n)
       (nest-window-stack n)))))


;; update just the window stack, and add new ones if required
(define (nest-update-window-stack nest delta)
  (window-stack-update
   (make-window-stack
    (foldl 
     (lambda (wasp r)
       (cond 
	((eq? (wasp-state wasp) 'state-forage-start)
	 (append r (list (build-window wasp))))
	((eq? (wasp-state wasp) 'state-forage-return)
	 (window-stack-return r wasp))
	((eq? (wasp-state wasp) 'state-forage-end)
	 (window-stack-remove r wasp))
	(else r)))
     (window-stack-windows (nest-window-stack nest))
     (nest-wasps nest)))
   delta nest))

(define (nest-update n delta)
  (make-nest
   (nest-energy n)
   (nest-location n)
   (+ (nest-time-of-year n) delta)
   (nest-wasps-update-wasps
    (nest-wasps-update n delta))
   (nest-menu n)
   (nest-wasps-update-cells n)
   (nest-update-window-stack n delta)))

(define (nest-render n ctx)
  (ctx.drawImage (find-image "backgrounds/temperate-city.png") 0 0)
  (let ((hex (find-image "sprites/hex.png")))
    (for-each
     (lambda (cell)
       (when (not (eq? (cell-code cell) cell-code-unbuilt))
	     (ctx.drawImage hex
			    (- (vx (cell-pos cell)) (/ hex.width 2))
			    (- (vy (cell-pos cell)) (/ hex.height 2)))))
     (nest-cells n)))
  (entity-list-render (nest-wasps n) ctx)
  (window-stack-render (nest-window-stack n) ctx)
  (menu-render (nest-menu n))
  (set! ctx.font "normal 25pt pompiere")
  (set! ctx.fillStyle "#fff")
  (set! ctx.globalAlpha 0.5)
  (ctx.fillRect 90 60 200 500)
  (set! ctx.globalAlpha 1.0)
  (set! ctx.fillStyle "#000")
  (ctx.fillText (string-append "energy: " (nest-energy n)) 100 100)
  (ctx.fillText (string-append "time of year: " (Math.floor (nest-time-of-year n))) 100 150)
  (ctx.fillText (string-append "season: " (time->season (nest-time-of-year n))) 100 200)
  (ctx.fillText (string-append "wasps: " (length (nest-wasps n))) 100 250)
  (ctx.fillText (string-append "cells: " (length (nest-cells n))) 100 300)
  

  )
