;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (make-event type time-left data fn cond-fn) 
  (list type time-left data fn cond-fn))

(define (event-type e) (list-ref e 0))
(define (event-time-left e) (list-ref e 1))
(define (event-modify-time-left e s) (list-replace e 1 s))
(define (event-data e) (list-ref e 2))
(define (event-modify-data e s) (list-replace e 2 s))
(define (event-fn e) (list-ref e 3))
(define (event-cond-fn e) (list-ref e 4))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (event-update event nest delta)
  (event-modify-time-left
   (cond
    ((eq? (event-type event) 'attack) (pestcontrol-update event delta))
    ((eq? (event-type event) 'storm) (storm-update event delta))
    ((eq? (event-type event) 'wildflower) (storm-update event delta))
    ((eq? (event-type event) 'manicured) (manicured-update event delta))
    ((eq? (event-type event) 'ant-attack) (ant-attack-update event nest delta))
    ((eq? (event-type event) 'organic) (organic-update event nest delta))
    ((eq? (event-type event) 'swatted) (swatted-update event nest delta))
    ((eq? (event-type event) 'hoverfly) (hoverfly-attack-update event nest delta))
    (else event))
   (- (event-time-left event) delta)))

(define (event-render-entities renderer nest)
  (let ((event (nest-event nest)))    
    ;; event specific background animation
    (cond
     ((and event (eq? (event-type event) 'ant-attack))
      (ant-attack-render-entities renderer event))
     ((and event (eq? (event-type event) 'hoverfly))
      (hoverfly-attack-render-entities renderer event))
     (else renderer))))

(define (event-render nest ctx)
  (let ((event (nest-event nest)))    
    ;; event specific background animation
    (cond
     ((eq? (event-type event) 'attack) (pestcontrol-render ctx event))
     ((eq? (event-type event) 'storm) (storm-render ctx event))
     ((eq? (event-type event) 'wildflower) (wildflower-render ctx event))
     ((eq? (event-type event) 'manicured) (manicured-render ctx event))
     ((eq? (event-type event) 'ant-attack) (ant-attack-render ctx event))
     ((eq? (event-type event) 'organic) (organic-render ctx event))
     ((eq? (event-type event) 'swatted) (swatted-render ctx event))
     ((eq? (event-type event) 'hoverfly) (hoverfly-attack-render ctx event))
     (else 0))))

;; if probs add up to less than 1 might return false
;; delta to make frame rate independant
(define (probability-choice delta probs)
  (define (_ val prob-lis)
    (let ((nval (- val (* delta (cadr (car prob-lis))))))
      (cond
       ((< nval 0)
	(car (car prob-lis)))
       ((null? (cdr prob-lis))
	#f)
       (else (_ nval (cdr prob-lis))))))
  (_ (rndf) probs))

(define (build-wasp-game-events location)
  (if (eq? location "city")
      (list
       (storm-builder)
       (ant-attack-builder)
       (pestcontrol-builder)
       (manicured-builder)
       (manicured-builder)
       (swatted-builder)
       (hoverfly-attack-builder)

       (organic-builder)
       )
      (list
       (storm-builder)
       (ant-attack-builder)
       (hoverfly-attack-builder)

       (wildflower-builder)
       (organic-builder)
       (wildflower-builder)
       )))

