;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "scm/maths.jscm")
(load "scm/random.jscm")
(load "scm/nightjar.jscm")
(load "scm/local-storage.jscm")

(define params-version 9)
(define player-id -1)
(define player-name "???")
(define score-per-mating 10)
(define end-game-time 7)

(let ((v (local-load "wasp-game-version")))
  (when (or (not v) (< v params-version))
	(local-nuke)
	(local-save "wasp-game-version" params-version)
	))

(local-setup-params 
 "wasp-game" 
 (list
  (make-param "wasp-speed" 300 "pixels per second")
  (make-param "ant-speed" 300 "pixels per second")
  (make-param "hoverfly-speed" 300 "pixels per second")
  (make-param "wasp-build-time" 1 "seconds")
  (make-param "wasp-laying-time" 2.5 "seconds")
  (make-param "wasp-egg-time" 20 "seconds") 
  (make-param "hoverfly-grub-time" 5 "seconds")
  (make-param "hoverfly-lay-time" 5 "seconds")
  (make-param "wasp-tending-time" 1 "seconds")
  (make-param "wasp-forage-time" 15 "seconds")
  (make-param "wasp-dying-time" 3 "seconds")
  (make-param "wasp-disperse-time" 5 "seconds")
  (make-param "wasp-mating-time" 20 "seconds")
  (make-param "wasp-reproductive-threshold" 5 "wasps")
  (make-param "nest-year-length" 300 "seconds")
  (make-param "nest-forage-cost" 0 "energy units")
  (make-param "nest-build-cell-cost" -10 "energy units")
  (make-param "nest-lay-egg-cost" -10 "energy units")
  (make-param "nest-tend-brood-cost" -10 "energy units")
  (make-param "nest-defend-nest-cost" -10 "energy units")
  (make-param "nest-forage-benefit" 20 "energy units")
  (make-param "nest-forage-variation" 5 "energy units")
  (make-param "nest-start-energy" 100 "energy units")
  (make-param "nest-start-wasps" 1 "wasps")
  (make-param "nest-energy-drain" 0.02 "energy units per sec")
  (make-param "event-start-time" 90 "seconds")
  (make-param "event-time-between-events" 20 "seconds")
  (make-param "storm-duration" 20 "seconds")  
  (make-param "storm-deadliness" 0.1 "prob per second")
  (make-param "pestcontrol-duration" 10 "seconds")  
  (make-param "pestcontrol-deadliness" 0.2 "prob per second")
  (make-param "wildflower-duration" 20 "seconds")  
  (make-param "wildflower-multiplier" 2.0 "energy boost")
  (make-param "manicured-duration" 20 "seconds")  
  (make-param "manicured-multiplier" 0.5 "energy reduction")
  (make-param "ant-duration" 20 "seconds")  
  (make-param "ant-number" 50 "ants")  
  (make-param "organic-duration" 20 "seconds")  
  (make-param "organic-multiplier" 2.0 "energy boost")
  (make-param "swatted-duration" 10 "seconds")  
  (make-param "swatted-deadliness" 0.2 "prob per second")
  (make-param "hoverfly-attack-duration" 30 "seconds")  
  (make-param "hoverfly-attack-number" 3 "hoverflies")  
  ))

(load "scm/ordered-list.jscm")
(load "scm/particles.jscm")
(load "scm/animation.jscm")
(load "scm/entity.jscm")
(load "scm/entity-list.jscm")
(load "scm/entity-renderer.jscm")
(load "scm/windows.jscm")
(load "scm/wasp.jscm")
(load "scm/cell.jscm")
(load "scm/event.jscm")
(load "scm/storm-event.jscm")
(load "scm/pestcontrol-event.jscm")
(load "scm/wildflower-event.jscm")
(load "scm/manicured-event.jscm")
(load "scm/ant-event.jscm")
(load "scm/organic-event.jscm")
(load "scm/swatted-event.jscm")
(load "scm/ants.jscm")
(load "scm/hoverfly.jscm")
(load "scm/hoverfly-event.jscm")
(load "scm/scores.jscm")
(load "scm/nest.jscm")
(load "scm/menu.jscm")
(load "scm/info.jscm")
(load "scm/demo.jscm")
(load "scm/score-popup.jscm")

(define (button-image)
  (find-image (choose (list "sprites/hex-1.png"
			    "sprites/hex-2.png"
			    "sprites/hex-3.png"
			    "sprites/hex-4.png"))))

(define (small-button-image)
  (find-image (choose (list "button-s1.png"))))

(define (button-sound)
  (play-sound "button.wav"))

(define default-button-x (- (/ screen-width 2) 150))
(define default-button-y (+ (/ screen-height 2) 200))
(define default-button-width 300)
(define default-button-height 80)

(define button-gap 250)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (empty-nightjar-data player-id location time) (make-new-nest player-id location time))

(define (register-game c player-id location)
  (server-call-mutate
   "game"
   (list (list "player_id" player-id)
	 (list "location" location)) 
   (lambda (c game-id)	 
     (reset-scores!)
     (nightjar-game-screen c game-id location)))
  c)

(define (send-update-scores c)
  (server-call-mutate
   "score"
   (list
	 (list "game_id" (nest-game-id (game-data c)))
	 (list "new_nests" (scores-new-nests))
	 (list "num_workers_laid" (scores-num-workers-laid))
	 (list "num_workers_hatched" (scores-num-workers-hatched))
	 (list "cells_built" (scores-cells-built))
	 (list "events_survived" (scores-events-survived))
	 (list "num_reproductives_hatched" (scores-num-reproductives-hatched))
	 (list "energy_foraged" (scores-energy-foraged))
	 (list "survival_time" (nest-time-of-year (game-data c)))
	 (list "forages" (scores-forages))
	 (list "score" (+ (scores-forages) (* score-per-mating (scores-new-nests))))
	 )
   (lambda (c score-pos)
     (if (eq? player-name "???")
	 (nightjar-enter-name c (JSON.parse score-pos))
	 (nightjar-end game (JSON.parse score-pos)))))  
  c)

(define (register c location)
  (if (< player-id 0)
      (server-call-mutate
       "player"
       '() 
       (lambda (c id)	 
	 (set! player-id id)
	 (register-game c player-id location)))
      (register-game c player-id location)))

(define (nightjar-intro c)
    (game-modify-timeout
     (lambda ()
       (set! window.location "/"))
     (game-modify-data
      (lambda (d)
	(make-new-demo))
      (game-modify-update
       (lambda (t c)
	 (game-modify-data
	  (lambda (d)
	    (demo-update (game-data c) (/ t 1000) (game-delta c)))
	  c))
       (game-modify-render
	(lambda (ctx)
	  (demo-render (game-data c) ctx)
	  (set! ctx.fillStyle "#606353")
	  
	  (set! ctx.font "normal 75pt pompiere")
	  
	  (wrap-text ctx "COULD YOU BE A WASP?" 0 200 1300 100)
	  
	  (set! ctx.font "normal 25pt pompiere")
	  (wrap-text ctx "v0.1" 0 300 800 40)
	  (set! ctx.font "normal 30pt pompiere")

	  (ctx.drawImage (find-image "sprites/wildflowers1.png") 0 460)
	  (ctx.drawImage (find-image "sprites/wildflowers2.png") 1350 460)
	  
	  )
	
	(game-modify-buttons
	 (list
	  
	  (rect-button
	   "PLAY!"
	   (- default-button-x 400)
	   default-button-y
	   default-button-width default-button-height
	   "jumpy"
	   (lambda (c)
	     (button-sound)
	     (nightjar-location c)
	     ;;(nightjar-end c 99)
	     ))
	  
	  (rect-button
	   "LEADERBOARD"
	   default-button-x
	   default-button-y
	   default-button-width default-button-height
	   "jumpy"
	   (lambda (c)
	     (button-sound)
	     (server-call-mutate
	      "hiscores"
	      (list)
	      (lambda (c scores)	      
		(nightjar-hiscores c (JSON.parse scores))))
	     c))
	     
	  
	  (rect-button
	   "HOW TO PLAY"
	   (+ default-button-x 400)
	   default-button-y
	   default-button-width default-button-height
	   "jumpy"
	   (lambda (c)
	     (button-sound)
	     (nightjar-about c)))
	  )
	 c))))))

(define (nightjar-location c)
  (game-modify-render
   (lambda (ctx)
     (demo-render (game-data c) ctx)
     (set! ctx.fillStyle "#606353")
     (set! ctx.font "normal 75pt pompiere")
     (wrap-text ctx "CHOOSE YOUR NEST LOCATION" 0 200 1300 100)    
     (set! ctx.font "normal 39pt pompiere")
     (wrap-text ctx "Different places have different dangers and opportunities. Life is easier in the forest than in the city." 0 300 1000 60)     
     (set! ctx.font "normal 30pt pompiere")
     (ctx.drawImage (find-image "sprites/wildflowers1.png") 0 460)
     (ctx.drawImage (find-image "sprites/wildflowers2.png") 1350 460)
     (set! ctx.font "bold 40pt pompiere")
     )
	
   (game-modify-buttons
    (list
     
     (image-button
      "CITY"
      1000 
      default-button-y
      "jumpy"
      (find-image "city-button.png")
      (lambda (c)
	(button-sound)
	(register c "city")
	c))

     (image-button
      "FOREST"
      580
      default-button-y
      "jumpy"
      (find-image "forest-button.png") 
      (lambda (c)
	(button-sound)
	(register c "forest")
	c))
     )
    c)))

(define (nightjar-about c)
   (game-modify-render
    (lambda (ctx)
      ;;(ctx.drawImage (find-image "crab2.png") 1240 550)
     (demo-render (game-data c) ctx)

      (set! ctx.font "normal 75pt pompiere")
      (wrap-text ctx "HOW TO PLAY" 0 100 1300 100)
      (set! ctx.font "normal 25pt pompiere")
      
      (wrap-text-left ctx "In this game you play as a wasp – see if you can build your nest and grow your colony in the face of unexpected hazards. Once you have a big enough colony you’ll get the option to lay eggs that turn into reproductive wasps. Make sure you disperse these special wasps in winter so they can find a mate and start their own colonies…" 300 150 1000 40)

      (wrap-text-left ctx "The game is based on the European paper wasp (Polistes dominula) using scientific research that has helped us understand the complex lives of these fascinating animals." 300 330 530 40)

      (set! ctx.font "normal 30pt pompiere")

      (ctx.drawImage (find-image "logos.png") 300 470)

      ;;(set! ctx.globalAlpha 0.5)
      (ctx.drawImage (find-image "wasp.jpg") 860 270)
      ;;(set! ctx.globalAlpha 1.0)      
      )

    (game-modify-buttons
     (list
      (rect-button
       "BACK"
       default-button-x
       default-button-y
       default-button-width 
       default-button-height 
       "jumpy"
       (lambda (c)
         (button-sound)
         (nightjar-intro game))))
     c)))

(define (nightjar-game-screen c player-id location)
  (game-modify-data
   (lambda (d)
     (empty-nightjar-data player-id location (/ (game-time c) 1000)))
   (game-modify-mouse-hook
    (lambda (state c)
      (game-modify-data
       (lambda (d)
	 (nest-update-mouse (game-data c) state (game-mx c) (game-my c)))
       c))   
    (game-modify-render
     (lambda (ctx)
       (nest-render (game-data c) ctx (game-time c)))
     (game-modify-update
      (lambda (t c)
	(game-modify-data
	 (lambda (d)
	   (nest-update (game-data c) (/ t 1000) (game-delta c)))
	 (if (> (nest-end-game-timer (game-data c)) end-game-time)
	     (game-modify-update ;; turn off update so we only send once
	      (lambda (t c)
		c)
	      (send-update-scores c))
	     c)))
      (game-modify-buttons
       (list
	(rect-button
	 "QUIT"
	 20
	 (+ default-button-y 85)
	 60 60
	 #f
	 (lambda (c)
	   (button-sound)
	   (nightjar-intro game)))
	) c))))))

(define scores-anim-t 0)
(define scores-anim-nests 0)
(define scores-anim-activity 0)
(define scores-anim-timing 0.10) 

(define (nightjar-end c rank)
  (set! scores-anim-pos 0)
  (set! scores-anim-nests -1)
  (set! scores-anim-activity -1)
  (game-modify-mouse-hook
   (lambda (state c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.fillStyle text-col)      
      (set! ctx.font "normal 30pt pompiere")
      
      (let ((n (game-data c)))		
	(set! ctx.fillStyle highlight2-col)
	(ctx.fillRect (- (/ screen-width 2) 330) 50 660 280)
	(set! ctx.fillStyle text-col)      
	
	(ctx.fillText (string-append "Wasp activity: " scores-anim-activity) 500 100)
	(set! ctx.font "normal 20pt pompiere")
	(ctx.fillText "(Pollination and pest control from foraging)" 500 140)
	(set! ctx.font "bold 30pt pompiere")	
	(when (>= scores-anim-activity 0)
	      (ctx.fillText (string-append "" scores-anim-activity " points") 950 100))
	(set! ctx.font "normal 30pt pompiere")

	(ctx.fillText (string-append "New nests made: " (if (> scores-anim-nests 0) scores-anim-nests 0)) 500 200)
	(set! ctx.font "normal 20pt pompiere")
	(ctx.fillText "(Number of dispersed reproductive wasps)" 500 240)
	(set! ctx.font "bold 30pt pompiere")	
	(when (>= scores-anim-nests 0)
	      (ctx.fillText (string-append "" (* scores-anim-nests score-per-mating) " points") 950 200))
	(set! ctx.font "normal 30pt pompiere")
	
	(ctx.fillText "YOUR TOTAL SCORE:" 500 300)
	(set! ctx.font "bold 30pt pompiere")	
	(when (>= scores-anim-nests 0)
	      (ctx.fillText (string-append "" (+ scores-anim-activity (* score-per-mating scores-anim-nests)) " points") 950 300))
	(set! ctx.font "normal 30pt pompiere")
	
	(if (< rank 9)
	    (fill-centre-text ctx (string-append "You are position " (+ rank 1) " on the leaderboard!") (/ screen-width 2) 400)
	    (fill-centre-text ctx (string-append "You are position " (+ rank 1) " - try again for a top ten leaderboard position...")  (/ screen-width 2) 400))
	
	
;	(ctx.fillText (string-append "Other statistics: " (scores-new-nests)) 500 250)	
;	(ctx.fillText (string-append "Built " (scores-cells-built) " nest cells") 500 300)
;	(ctx.fillText (string-append "Laid " (scores-num-workers-laid) " worker eggs and " (scores-num-workers-hatched) " hatched") 500 350)
;	(ctx.fillText (string-append "Survived " (scores-events-survived) " events") 500 400)
;	(ctx.fillText (string-append "Produced " (scores-num-reproductives-hatched) " reproductive adults") 500 450)
;	(ctx.fillText (string-append "Foraged " (floor (scores-energy-foraged)) " energy units") 500 500)


	(when (eq? scores-anim-nests (scores-new-nests))	      
	      (wrap-text ctx (scores-analysis) 0 470 700 50))
	
	)
      

    
      (ctx.drawImage (find-image "sprites/wildflowers1.png") 0 460)
      (ctx.drawImage (find-image "sprites/wildflowers2.png") 1350 460)

      )
    (game-modify-update
     (lambda (t c)
       (when (and (> scores-anim-t scores-anim-timing)
		  (< scores-anim-nests (scores-new-nests)))
	     (set! scores-anim-t 0)
	     (cond
	      ((< scores-anim-activity (scores-forages))
	       (play-sound "score-up.wav")
	       (set! scores-anim-activity (+ scores-anim-activity 1)))
	      (else
	       (play-sound "score-up-mate.wav")
	       (set! scores-anim-nests (+ scores-anim-nests 1)))))
       (set! scores-anim-t (+ scores-anim-t (game-delta c)))
       c)
     (game-modify-buttons
      (list
       (rect-button
	"BACK"
	default-button-x
	default-button-y
	default-button-width 
	default-button-height 
	"jumpy"
	(lambda (c)
	  (button-sound)
	  (nightjar-intro game))))
      c)))))

(define col1 -350)
(define col2 -125)
(define col3 125)
(define col4 350)

(define (nightjar-hiscores c scores)
  (game-modify-render
   (lambda (ctx)
     (demo-render (game-data c) ctx)
     (set! ctx.fillStyle "#000")      
     (set! ctx.font "normal 75pt pompiere")
     (wrap-text ctx "LEADERBOARD" 0 100 1300 100)
     (set! ctx.font "normal 30pt pompiere")
     
     (wrap-text ctx "NAME" col1 170 1000 1)
     (wrap-text ctx "NESTS FOUNDED" col2 170 1000 1)
     (wrap-text ctx "NEST LOCATION" col3 170 1000 1)
     (wrap-text ctx "SCORE" col4 170 1000 1)
     
     (when scores
	   (index-for-each
	    (lambda (i e)
	      (cond
	       ((zero? i)
		(set! ctx.font "bold 30pt pompiere")
		(text-flashy-render ctx (list-ref e 0) col1 (+ 220 (* 45 i)) (game-time c))
		(text-flashy-render ctx (+ "" (list-ref e 1) " nests") col2 (+ 220 (* 45 i)) (game-time c))
		(text-flashy-render ctx (+ "" (list-ref e 3)) col3 (+ 220 (* 45 i)) (game-time c))
		(text-flashy-render ctx (+ "" (list-ref e 2) " points") col4 (+ 220 (* 45 i)) (game-time c))
		(set! ctx.font "normal 30pt pompiere"))
	       (else
		(wrap-text ctx (list-ref e 0) col1 (+ 220 (* 45 i)) 1000 1)
		(wrap-text ctx (+ "" (list-ref e 1) " nests") col2 (+ 220 (* 45 i)) 1000 1)
		(wrap-text ctx (+ "" (list-ref e 3)) col3 (+ 220 (* 45 i)) 1000 1)
		(wrap-text ctx (+ "" (list-ref e 2) " points") col4 (+ 220 (* 45 i)) 1000 1))))
	    scores))

     (ctx.drawImage (find-image "sprites/wildflowers1.png") 0 460)
     (ctx.drawImage (find-image "sprites/wildflowers2.png") 1350 460)

     )
   (game-modify-buttons
    (list
     (rect-button
      "BACK"
       default-button-x
       (+ default-button-y 85)
       default-button-width 
       default-button-height 
       "jumpy"
       (lambda (c)
	 (button-sound)
	 (nightjar-intro game))))
    c)))

(define (type-into str ch)
  (car
   (foldl
    (lambda (c r)
      (if (and (not (cadr r)) (eq? c "?"))
          (list (string-append (car r) ch) #t)
          (list (string-append (car r) c) (cadr r))))
    (list "" #f)
    (str.split ""))))

(define (type-into-delete str)
  (car (foldl
        (lambda (c r)
          ;;(console.log (list c r))
          (if (and (not (cadr r)) (not (eq? c "?")))
              (list (string-append "?" (car r)) #t)
              (list (string-append c (car r)) (cadr r))))
        (list "" #f)
        (reverse (str.split "")))))

(define (type-username ch c)
  (set! player-name (type-into player-name ch)))

(define (type-delete c)
  (set! player-name (type-into-delete player-name)))


(define (qwertypos-x i)  
  (cond ((< i 10) i)
	((and (> i 9) (< i 19)) (- i 10))
	(else (- i 19))))

(define (qwertypos-y i)  
  (cond ((< i 10) 0)
	((and (> i 9) (< i 19)) 1)
	(else 2)))

(define (nightjar-enter-name c rank)
  (game-modify-mouse-hook
   (lambda (state c) c)
   (game-modify-update
    (lambda (t c) c)
    (game-modify-render
     (lambda (ctx)
       (set! ctx.font "normal 30pt pompiere")
       (wrap-text ctx "Enter your name for the leaderboard" 0 70 1000 70)
       (set! ctx.font "normal 50pt pompiere")
       (wrap-text ctx player-name 0 150 1000 70)
       (set! ctx.font "normal 30pt pompiere"))

     (game-modify-buttons
      (append
       (index-map
	(lambda (i ch)
	  (let ((x (+ (cond ((eq? (qwertypos-y i) 0) 250)
			    ((eq? (qwertypos-y i) 1) 300)
			    (else 380))
		      (* (qwertypos-x i) 120)))
		(y (+ 220 (* (qwertypos-y i) 130))))
	    (image-button ch x y #f
			  (button-image)
			  (lambda (c)
			    (button-sound)
			    (type-username ch c)
			    c))))
	(list "Q" "W" "E" "R" "T" "Y" "U" "I" "O" "P"
	      "A" "S" "D" "F" "G" "H" "J" "K" "L"
	      "Z" "X" "C" "V" "B" "N" "M"))

       (list
	(rect-button "DELETE" (- default-button-x 200) default-button-y default-button-width default-button-height "jumpy"
		     (lambda (c)
		       (button-sound)		      
		       (type-delete c)
		       c))

	(rect-button "DONE"  (+ default-button-x 200) default-button-y default-button-width default-button-height "jumpy"
		     (lambda (c)
		       (button-sound)
		       (server-call
			"player-name"
			(list
			 (list "player_id" player-id)
			 (list "player_name" player-name)))		       
		       (button-sound)		       
		       (nightjar-end game rank)))
	))
      c)))))


(set! ctx.font "normal 75pt pompiere")
(set! ctx.fillStyle "#606353")
(centre-text ctx "Loading..." 240 240)

(load-sounds!
 (list
  "activity-1.wav"
  "activity-2.wav"
  "activity-3.wav"
  "ant-1.wav"
  "ant-2.wav"
  "ant-3.wav"
  "button.wav"
  "disperse-time.wav"
  "hatch.wav"
  "hoverfly-1.wav"
  "hoverfly-2.wav"
  "hoverfly-3.wav"
  "low-energy.wav"
  "no-energy-click.wav"
  "score-up.wav"
  "score-up-mate.wav"
  "wasp-landing-1.wav"
  "wasp-landing-2.wav"
  "wasp-landing-3.wav"
  "wasp-takeoff-1.wav"
  "wasp-takeoff-2.wav"
  "wasp-takeoff-3.wav"))

(load-images!
 (append 
  (anim->filenames wasp-animation)
  (anim->filenames ant-animation)
  (anim->filenames hoverfly-animation)
  (list 
   "sprites/hex.png"
   "sprites/cloud-1.png"
   "sprites/cloud-2.png"
   "sprites/cloud-3.png"
   "sprites/cloud-4.png"
   "sprites/cloud-5.png"
   "sprites/cloud-6.png"
   "sprites/scloud-1.png"
   "sprites/scloud-2.png"
   "sprites/scloud-3.png"
   "sprites/scloud-4.png"
   "sprites/scloud-5.png"
   "sprites/scloud-6.png"
   "sprites/hex-1.png"
   "sprites/hex-2.png"
   "sprites/hex-3.png"
   "sprites/hex-4.png"
   "sprites/hex-drop.png"
   "sprites/heart.png"
   "sprites/poison.png"
   "sprites/spray-can.png"
   "sprites/swatted.png"
   "sprites/lightning.png"
   "sprites/rain.png"
   "sprites/rain2.png"
   "sprites/glow.png"
   "sprites/queen-glow.png"
   "sprites/wildflowers1.png"
   "sprites/wildflowers2.png"
   "sprites/manicuredgarden1.png"
   "sprites/manicuredgarden2.png"
   "sprites/ant/pupa-carry.png"
   "sprites/menu-triangle.png"
   "sprites/menu-triangle-up.png"
   "sprites/season.png"
   "backgrounds/temperate-city.png"
   "backgrounds/temperate-forest.png"
   "wasp.jpg"
   "logos.png"
   "city-button.png"
   "forest-button.png"
   ))
 (lambda ()
   (msg "loaded...")
   (start-game canvas ctx)))

