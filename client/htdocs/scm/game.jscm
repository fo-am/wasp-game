;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "scm/maths.jscm")
(load "scm/random.jscm")
(load "scm/nightjar.jscm")
(load "scm/local-storage.jscm")

(define params-version 5)
(define player-id -1)
(define player-name "???")
(define score-per-mating 10)
(define end-game-time 7)

(let ((v (local-load "wasp-game-version")))
  (when (or (not v) (< v params-version))
	(local-nuke)
	(local-save "wasp-game-version" params-version)
	))

(local-setup-params 
 "wasp-game" 
 (list
  (make-param "wasp-speed" 300 "pixels per second")
  (make-param "ant-speed" 300 "pixels per second")
  (make-param "hoverfly-speed" 300 "pixels per second")
  (make-param "wasp-build-time" 5 "seconds")
  (make-param "wasp-laying-time" 5 "seconds")
  (make-param "wasp-egg-time" 20 "seconds") 
  (make-param "hoverfly-grub-time" 10 "seconds")
  (make-param "hoverfly-lay-time" 5 "seconds")
  (make-param "wasp-tending-time" 5 "seconds")
  (make-param "wasp-forage-time" 20 "seconds")
  (make-param "wasp-dying-time" 3 "seconds")
  (make-param "wasp-disperse-time" 10 "seconds")
  (make-param "wasp-mating-time" 30 "seconds")
  (make-param "wasp-reproductive-threshold" 5 "wasps")
  (make-param "nest-year-length" (* 60 5) "seconds")
  (make-param "nest-forage-cost" -5 "energy units")
  (make-param "nest-build-cell-cost" -10 "energy units")
  (make-param "nest-lay-egg-cost" -10 "energy units")
  (make-param "nest-tend-brood-cost" -10 "energy units")
  (make-param "nest-defend-nest-cost" -10 "energy units")
  (make-param "nest-forage-benefit" 20 "energy units")
  (make-param "nest-forage-variation" 5 "energy units")
  (make-param "nest-start-energy" 100 "energy units")
  (make-param "nest-start-wasps" 1 "wasps")
  (make-param "nest-energy-drain" 0.02 "energy units per sec")
  (make-param "event-start-time" (* 60 2.5) "seconds")
  (make-param "event-time-between-events" 20 "seconds")
  (make-param "storm-duration" 10 "seconds")  
  (make-param "storm-deadliness" 0.1 "prob per second")
  (make-param "pestcontrol-duration" 10 "seconds")  
  (make-param "pestcontrol-deadliness" 0.2 "prob per second")
  (make-param "wildflower-duration" 10 "seconds")  
  (make-param "wildflower-multiplier" 2.0 "energy boost")
  (make-param "manicured-duration" 10 "seconds")  
  (make-param "manicured-multiplier" 0.5 "energy reduction")
  (make-param "ant-duration" 10 "seconds")  
  (make-param "ant-number" 50 "ants")  
  (make-param "organic-duration" 10 "seconds")  
  (make-param "organic-multiplier" 2.0 "energy boost")
  (make-param "swatted-duration" 10 "seconds")  
  (make-param "swatted-deadliness" 0.2 "prob per second")
  (make-param "hoverfly-attack-duration" 20 "seconds")  
  (make-param "hoverfly-attack-number" 3 "hoverflies")  
  ))

(load "scm/ordered-list.jscm")
(load "scm/particles.jscm")
(load "scm/animation.jscm")
(load "scm/entity.jscm")
(load "scm/entity-list.jscm")
(load "scm/entity-renderer.jscm")
(load "scm/windows.jscm")
(load "scm/wasp.jscm")
(load "scm/cell.jscm")
(load "scm/event.jscm")
(load "scm/storm-event.jscm")
(load "scm/pestcontrol-event.jscm")
(load "scm/wildflower-event.jscm")
(load "scm/manicured-event.jscm")
(load "scm/ant-event.jscm")
(load "scm/organic-event.jscm")
(load "scm/swatted-event.jscm")
(load "scm/ants.jscm")
(load "scm/hoverfly.jscm")
(load "scm/hoverfly-event.jscm")
(load "scm/scores.jscm")
(load "scm/nest.jscm")
(load "scm/menu.jscm")
(load "scm/info.jscm")
(load "scm/demo.jscm")
(load "scm/score-popup.jscm")

(define (button-image)
  (find-image (choose (list "sprites/hex-1.png"
			    "sprites/hex-2.png"
			    "sprites/hex-3.png"
			    "sprites/hex-4.png"))))

(define (small-button-image)
  (find-image (choose (list "button-s1.png"))))

(define (button-sound)
  0
;  (play-sound
;   (choose
;    (list
;     "bubble-1.wav"
;     "bubble-2.wav"
;     "bubble-3.wav"
;     "bubble-7.wav"
;     )))
  )

(define default-button-x (- (/ screen-width 2) 170))
(define default-button-y (+ (/ screen-height 2) 200))
(define default-button-width 300)
(define default-button-height 80)

(define button-gap 250)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (empty-nightjar-data player-id location time) (make-new-nest player-id location time))

(define (register-game c player-id location)
  (server-call-mutate
   "game"
   (list (list "player_id" player-id)
	 (list "location" location)) 
   (lambda (c game-id)	 
     (reset-scores!)
     (nightjar-game-screen c game-id location)))
  c)

(define (send-update-scores c)
  (server-call-mutate
   "score"
   (list
    (list "game_id" (nest-game-id (game-data c)))
    (list "new_nests" (scores-new-nests))
    (list "num_workers_laid" (scores-num-workers-laid))
    (list "num_workers_hatched" (scores-num-workers-hatched))
    (list "cells_built" (scores-cells-built))
    (list "events_survived" (scores-events-survived))
    (list "num_reproductives_hatched" (scores-num-reproductives-hatched))
    (list "energy_foraged" (scores-energy-foraged))
    (list "survival_time" (nest-time-of-year (game-data c)))
    (list "forages" (scores-forages))
    (list "score" (+ (scores-forages) (* score-per-mating (scores-new-nests)))) 
    )
   (lambda (c score-pos)
     (if (eq? player-name "???")
	 (nightjar-enter-name c)
	 (begin
	   (server-call-mutate
	    "rank"
	    (list (list "id" player-id))
	    (lambda (game data)
	      (button-sound)
	      (nightjar-end game (JSON.parse data))))
	   c))))
  c)

(define (register c location)
  (if (< player-id 0)
      (server-call-mutate
       "player"
       '() 
       (lambda (c id)	 
	 (set! player-id id)
	 (register-game c player-id location)))
      (register-game c player-id location)))

(define (nightjar-intro c)
    (game-modify-timeout
     (lambda ()
       (set! window.location "/"))
     (game-modify-data
      (lambda (d)
	(make-new-demo))
      (game-modify-update
       (lambda (t c)
	 (game-modify-data
	  (lambda (d)
	    (demo-update (game-data c) (/ t 1000) (game-delta c)))
	  c))
       (game-modify-render
	(lambda (ctx)
	  (demo-render (game-data c) ctx)
	  (set! ctx.fillStyle "#606353")
	  
	  (set! ctx.font "normal 75pt pompiere")
	  
	  (wrap-text ctx "Why We Love Wasps" 0 200 1300 100)
	  
	  (set! ctx.font "normal 25pt pompiere")
	  (wrap-text ctx "Wasps are super..." 0 300 800 40)
	  (set! ctx.font "normal 30pt pompiere")
	  
	  )
	
	(game-modify-buttons
	 (list
	  
	  (rect-button
	   "PLAY!"
	   (- default-button-x 400)
	   default-button-y
	   default-button-width default-button-height
	   "jumpy"
	   (lambda (c)
	     (button-sound)
	     (nightjar-location c)))
	  
	  (rect-button
	   "LEADERBOARD"
	   default-button-x
	   default-button-y
	   default-button-width default-button-height
	   "jumpy"
	   (lambda (c)
	     (button-sound)
	     (server-call-mutate
	      "hiscores"
	      (list)
	      (lambda (c scores)	      
		(nightjar-hiscores c (JSON.parse scores))))
	     c))
	     
	  
	  (rect-button
	   "ABOUT"
	   (+ default-button-x 400)
	   default-button-y
	   default-button-width default-button-height
	   "jumpy"
	   (lambda (c)
	     (button-sound)
	     (nightjar-about c)))
	  )
	 c))))))

(define (nightjar-location c)
  (game-modify-render
   (lambda (ctx)
     (demo-render (game-data c) ctx)
     (set! ctx.fillStyle "#606353")
     (set! ctx.font "normal 75pt pompiere")
     (wrap-text ctx "Choose your nest location" 0 200 1300 100)    
     (set! ctx.font "normal 25pt pompiere")
     (wrap-text ctx "Different places have different dangers and opportunities" 0 300 800 40)
     (set! ctx.font "normal 30pt pompiere")
     )
	
   (game-modify-buttons
    (list
     
     (rect-button
      "CITY"
      (- default-button-x 200)
      default-button-y
      default-button-width default-button-height
      "jumpy"
      (lambda (c)
	(button-sound)
	(register c "city")
	c))

     (rect-button
      "FOREST"
      (+ default-button-x 200)
      default-button-y
      default-button-width default-button-height
      "jumpy"
      (lambda (c)
	(button-sound)
	(register c "forest")
	c))
     )
    c)))

(define (nightjar-about c)
   (game-modify-render
    (lambda (ctx)
      ;;(ctx.drawImage (find-image "crab2.png") 1240 550)

      (set! ctx.font "normal 75pt pompiere")
      (wrap-text ctx "About the wasp game" 0 200 1300 100)
      (set! ctx.font "normal 22pt pompiere")

      (wrap-text ctx "Please insert text and images about wasp research." 0 300 800 40)
      (set! ctx.font "normal 30pt pompiere")

      (set! ctx.globalAlpha 0.5)
      ;;(ctx.drawImage (find-image "foam-logo.png") (- (+ default-button-x 200) 50) 790)
      (set! ctx.globalAlpha 1.0)      
      )

    (game-modify-buttons
     (list
      (rect-button
       "BACK"
       default-button-x
       default-button-y
       default-button-width 
       default-button-height 
       "jumpy"
       (lambda (c)
         (button-sound)
         (nightjar-intro game))))
     c)))

(define (nightjar-game-screen c player-id location)
  (game-modify-data
   (lambda (d)
     (empty-nightjar-data player-id location (/ (game-time c) 1000)))
   (game-modify-mouse-hook
    (lambda (state c)
      (game-modify-data
       (lambda (d)
	 (nest-update-mouse (game-data c) state (game-mx c) (game-my c)))
       c))   
    (game-modify-render
     (lambda (ctx)
       (nest-render (game-data c) ctx (game-time c)))
     (game-modify-update
      (lambda (t c)
	(game-modify-data
	 (lambda (d)
	   (nest-update (game-data c) (/ t 1000) (game-delta c)))
	 (if (> (nest-end-game-timer (game-data c)) end-game-time)
	     (send-update-scores c)
	     c)))
      (game-modify-buttons
       (list
	(rect-button
	 "QUIT"
	 20
	 default-button-y
	 50 default-button-height
	 #f
	 (lambda (c)
	   (button-sound)
	   (nightjar-intro game)))
	) c))))))

(define (nightjar-end c rank)
  (game-modify-mouse-hook
   (lambda (state c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.fillStyle "#000")      
      (set! ctx.font "normal 75pt pompiere")
      (wrap-text ctx "Game Over" 0 200 1300 100)
      (set! ctx.font "normal 30pt pompiere")
      
      (let ((n (game-data c)))		
	(ctx.fillText (string-append "Built " (scores-cells-built) " nest cells") 500 300)
	(ctx.fillText (string-append "Laid " (scores-num-workers-laid) " worker eggs and " (scores-num-workers-hatched) " hatched") 500 350)
	(ctx.fillText (string-append "Survived " (scores-events-survived) " events") 500 400)
	(ctx.fillText (string-append "Produced " (scores-num-reproductives-hatched) " reproductive adults") 500 450)
	(ctx.fillText (string-append "Foraged " (floor (scores-energy-foraged)) " energy units") 500 500)
	(ctx.fillText (string-append "You made position " (- rank 1)) 500 550))      

      ;;(set! ctx.globalAlpha 0.5)
      ;;(ctx.drawImage (find-image "foam-logo.png") (- (+ default-button-x 200) 50) 790)
      ;;(set! ctx.globalAlpha 1.0)      
      )
    (game-modify-update
     (lambda (t c)
       c)
     (game-modify-buttons
      (list
       (rect-button
	"BACK"
	default-button-x
	default-button-y
	default-button-width 
	default-button-height 
	"jumpy"
	(lambda (c)
	  (button-sound)
	  (nightjar-intro game))))
      c)))))

(define (nightjar-hiscores c scores)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.fillStyle "#000")      
     (set! ctx.font "normal 75pt pompiere")
     (wrap-text ctx "Leaderboard" 0 100 1300 100)
     (set! ctx.font "normal 30pt pompiere")
     
     (wrap-text ctx "NAME" -300 180 1000 1)
     (wrap-text ctx "SCORE" 0 180 1000 1)
     (wrap-text ctx "NEW NESTS FOUNDED" 300 180 1000 1)
     
     (when scores
	   (index-for-each
	    (lambda (i e)
	      (cond
	       ((zero? i)
		(set! ctx.font "bold 30pt pompiere")
		(text-flashy-render ctx (list-ref e 0) -300 (+ 230 (* 45 i)) (game-time c))
		(text-flashy-render ctx (+ "" (list-ref e 2) " points") 0 (+ 230 (* 45 i)) (game-time c))
		(set! ctx.font "normal 30pt pompiere"))
	       (else
		(wrap-text ctx (list-ref e 0) -300 (+ 230 (* 45 i)) 1000 1)
		(wrap-text ctx (+ ""  (list-ref e 2) " points") 0 (+ 230 (* 45 i)) 1000 1))))
	    scores)))
   (game-modify-update
    (lambda (t c)
      c)
    (game-modify-buttons
     (list
      (rect-button
       "BACK"
       default-button-x
       default-button-y
       default-button-width 
       default-button-height 
       "jumpy"
       (lambda (c)
	 (button-sound)
	 (nightjar-intro game))))
     c))))

(define (type-into str ch)
  (car
   (foldl
    (lambda (c r)
      (if (and (not (cadr r)) (eq? c "?"))
          (list (string-append (car r) ch) #t)
          (list (string-append (car r) c) (cadr r))))
    (list "" #f)
    (str.split ""))))

(define (type-into-delete str)
  (car (foldl
        (lambda (c r)
          ;;(console.log (list c r))
          (if (and (not (cadr r)) (not (eq? c "?")))
              (list (string-append "?" (car r)) #t)
              (list (string-append c (car r)) (cadr r))))
        (list "" #f)
        (reverse (str.split "")))))

(define (type-username ch c)
  (set! player-name (type-into player-name ch)))

(define (type-delete c)
  (set! player-name (type-into-delete player-name)))


(define (qwertypos-x i)  
  (cond ((< i 10) i)
	((and (> i 9) (< i 19)) (- i 10))
	(else (- i 19))))

(define (qwertypos-y i)  
  (cond ((< i 10) 0)
	((and (> i 9) (< i 19)) 1)
	(else 2)))

(define (nightjar-enter-name c)
  (game-modify-mouse-hook
   (lambda (state c) c)
   (game-modify-update
    (lambda (t c) c)
    (game-modify-render
     (lambda (ctx)
       (set! ctx.font "normal 30pt open-sans")
       (wrap-text ctx "Enter your name" 0 200 1000 70)
       (set! ctx.font "normal 50pt open-sans")
       (wrap-text ctx player-name 0 280 1000 70)
       (set! ctx.font "normal 30pt open-sans"))

     (game-modify-buttons
      (append
       (index-map
	(lambda (i ch)
	  (let ((x (+ 200 (* (qwertypos-x i) 120)))
		(y (+ 350 (* (qwertypos-y i) 130))))
	    (image-button ch x y #f
			  (button-image)
			  (lambda (c)
			    (button-sound)
			    (type-username ch c)
			    c))))
	(list "Q" "W" "E" "R" "T" "Y" "U" "I" "O" "P"
	      "A" "S" "D" "F" "G" "H" "J" "K" "L"
	      "Z" "X" "C" "V" "B" "N" "M"))

       (list
	(rect-button "DELETE" 900 700 default-button-width default-button-height "jumpy"
		     (lambda (c)
		       (button-sound)		      
		       (type-delete c)
		       c))

	(rect-button "DONE" 1250 700 default-button-width default-button-height "jumpy"
		     (lambda (c)
		       (button-sound)
		       (server-call
			"player-name"
			(list
			 (list "player_id" player-id)
			 (list "player_name" player-name)))
		       (server-call-mutate
                        "rank"
			(list (list "id" player-id))
                        (lambda (game data)
                          (button-sound)
                          (nightjar-end game (JSON.parse data))))
		       c))
	))
      c)))))


(set! ctx.font "normal 75pt pompiere")
(set! ctx.fillStyle "#606353")
(centre-text ctx "Loading..." 240 240)

;(load-sounds!
; (list
;  "found.wav"
;  ))


(load-images!
 (append 
  (anim->filenames wasp-animation)
  (anim->filenames ant-animation)
  (anim->filenames hoverfly-animation)
  (list 
   "sprites/hex.png"
   "sprites/cloud-1.png"
   "sprites/cloud-2.png"
   "sprites/cloud-3.png"
   "sprites/cloud-4.png"
   "sprites/cloud-5.png"
   "sprites/cloud-6.png"
   "sprites/scloud-1.png"
   "sprites/scloud-2.png"
   "sprites/scloud-3.png"
   "sprites/scloud-4.png"
   "sprites/scloud-5.png"
   "sprites/scloud-6.png"
   "sprites/hex-1.png"
   "sprites/hex-2.png"
   "sprites/hex-3.png"
   "sprites/hex-4.png"
   "sprites/hex-drop.png"
   "sprites/heart.png"
   "sprites/poison.png"
   "sprites/spray-can.png"
   "sprites/swatted.png"
   "sprites/lightning.png"
   "sprites/rain.png"
   "sprites/rain2.png"
   "sprites/glow.png"
   "sprites/wildflowers1.png"
   "sprites/wildflowers2.png"
   "sprites/manicuredgarden1.png"
   "sprites/manicuredgarden2.png"
   "sprites/ant/pupa-carry.png"
   "sprites/menu-triangle.png"
   "sprites/menu-triangle-up.png"
   "backgrounds/temperate-city.png"
   "backgrounds/temperate-forest.png"
   ))
 (lambda ()
   (msg "loaded...")
   (start-game canvas ctx)))

