;; -*- mode: scheme; -*-

(define (make-entity id type pos sprite-size facing t sprite-list frame clip anim-speed)
  (list id type pos sprite-size facing t sprite-list frame clip anim-speed))

(define entity-size 10)

(define next-entity-id 0)
(define (generate-entity-id!) 
  (set! next-entity-id (+ next-entity-id 1))
  next-entity-id)

(define (entity-id e) (list-ref e 0))
(define (entity-type e) (list-ref e 1))
(define (entity-pos e) (list-ref e 2))
(define (entity-modify-pos e p) (list-replace e 2 p))
(define (entity-sprite-size e) (list-ref e 3))
(define (entity-facing e) (list-ref e 4))
(define (entity-modify-facing e v) (list-replace e 4 v))
(define (entity-t e) (list-ref e 5))
(define (entity-sprite-list e) (list-ref e 6))
(define (entity-frame e) (list-ref e 7))
(define (entity-clip e) (list-ref e 8))
(define (entity-modify-clip e v) (list-replace e 8 v))
(define (entity-anim-speed e) (list-ref e 9))

(define (entity-render e ctx)
  (let ((clip (list-ref (entity-sprite-list e) (entity-clip e))))
    (let ((image 
	   (list-ref
	    (list-ref 
	     clip
	     (modulo (entity-frame e) 
		     (length clip)))
	    (if (eq? (entity-facing e) "left") 0 1))))
      (if (eq? image #f)
	  (msg e)
	  (ctx.drawImage 
	   image
	   (- (vx (entity-pos e)) (/ (vx (entity-sprite-size e)) 2))
	   (- (vy (entity-pos e)) (/ (vy (entity-sprite-size e)) 2)))))))

(define (drop-n n l)
  (cond
   ((null? l) '())
   ((zero? n) l)
   (else (drop-n (- n 1) (cdr l)))))

(define (entity-update e delta)
  (append
   (make-entity
    (entity-id e)
    (entity-type e)
    (entity-pos e)
    (entity-sprite-size e)
    (entity-facing e)
    (+ (entity-t e) (* delta (entity-anim-speed e)))
    (entity-sprite-list e)
    (Math.floor (entity-t e))
    (entity-clip e)
    (entity-anim-speed e))
   (drop-n entity-size e)))

