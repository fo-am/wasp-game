;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define ant-speed (local-get-param "wasp-game" "ant-speed"))

(define ant-animation
  (list
   (make-anim-move "ant" "ant" '() (list "1" "2") 15 (vec2 0 0))
   ))

(define ant-animation-walk 0)
(define ant-offscreen (vec2 2000 700))

(define (make-ant) 
  (let ((pos ant-offscreen))
    (append 
     (make-entity 
      (generate-entity-id!)
      "ant" 
      pos 0
      (vec2 300 300)
      "left"
      (rndf)
      (anim-load-frames "7" ant-animation)
      0 ant-animation-walk #f 0 pos pos 0 0 (vec2 0 0))
     (list 'state-appear 0 #f))))

(define (ant-state a) (list-ref a (+ entity-size 0)))
(define (ant-modify-state a s) (list-replace a (+ entity-size 0) s))
(define (ant-dest-egg a) (list-ref a (+ entity-size 1)))
(define (ant-modify-dest-egg a s) (list-replace a (+ entity-size 1) s))
(define (ant-killed-egg a) (list-ref a (+ entity-size 2)))
(define (ant-modify-killed-egg a s) (list-replace a (+ entity-size 2) s))

(define (ant-update a delta nest)
  (ant-update-animation
   (let ((state (ant-state a)))
     (cond
      
      ((eq? state 'state-appear)
       ;; random timer
       (if (< (rndf) 0.01)
	   (ant-modify-state a 'state-search)
	   a))
      
      ((eq? state 'state-search)
       (let ((egg (nest-find-egg nest)))
	 ;; head to a egg or a random position
	 (ant-modify-state
	  (if egg
	      (ant-modify-dest-egg	       
	       (entity-walk-to-pos a (entity-pos egg))
	       (entity-id egg))
	      (entity-walk-to-pos
	       a (vec2 (+ 100 (* (rndf) 1000))
		       (+ 100 (* (rndf) 500)))))
	  'state-wander)))
      
      ((eq? state 'state-wander)
       (if (>= (entity-walk-time a) 1)
	   (let ((egg (entity-list-slow-search
			(nest-wasps nest)
			(ant-dest-egg a))))
	     ;; check if egg still exists
	     (if (and egg
		      ;; is it still an egg?
		      (or (eq? (wasp-state egg) 'state-egg)
			  (eq? (wasp-state egg) 'state-tended-egg)))
		 ;; (if so it can't have moved)		
		 ;; flag ant as having killed egg to be picked up later
		 (entity-walk-to-pos
		  (ant-modify-state
		   (ant-modify-killed-egg
		    (entity-modify-bg-image
		     a (find-image "sprites/ant/pupa-carry.png"))
		    #t)
		   'state-leave)
		  ant-offscreen)
		 ;; otherwise go back to searching
		 (ant-modify-state a 'state-search)))
	   (entity-walk a ant-speed delta)))

      ((eq? state 'state-leave)
       (if (>= (entity-walk-time a) 1)
	   ;; return to the nest searching
	   (ant-modify-state
	    (ant-modify-killed-egg
	     (entity-modify-bg-image a #f)
	     #f)
	    'state-search)
	   (entity-walk a ant-speed delta)))
            
      (else a)))
   delta))

(define (ant-update-animation w delta)  
  (let ((state (ant-state w)))
    (entity-modify-clip 
     (entity-modify-timer w (+ (entity-timer w) delta))
     (cond
      ((eq? state 'state-appear) ant-animation-walk)
      ((eq? state 'state-wander) ant-animation-walk)
      ((eq? state 'state-search) ant-animation-walk)
      (else (entity-clip w))))))
