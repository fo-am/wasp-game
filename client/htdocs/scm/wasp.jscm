;; -*- mode: scheme; -*-

(define wasp-animation
  (list
   (make-anim-move "7" "idle" (list "1" "2"))
   (make-anim-move "7" "walk" (list "1" "2" "3" "2"))
   (make-anim-move "7" "defend" (list "1" "2" "3" "2"))
   (make-anim-move "7" "build" (list "1" "2"))
   (make-anim-move "7" "fly" (list "1" "2" "3" "4" "5"))
   (make-anim-move "7" "lay" (list "1" "2" "3" "4"))
   (make-anim-move "7" "tend" (list "1" "2"))
   ))

(define wasp-animation-idle 0)
(define wasp-animation-walk 1)
(define wasp-animation-defend 2)
(define wasp-animation-build 3)
(define wasp-animation-fly 4)
(define wasp-animation-lay 5)
(define wasp-animation-tend 6)

(define (make-wasp capabilities) 
  (let ((pos (vec2 (random 1000) (random 500))))
    (append 
     (make-entity 
      (generate-entity-id!)
      "wasp" 
      pos
      (vec2 300 300)
      (choose (list "left" "right"))
      (rndf)
      (anim-load-frames wasp-animation)
      0 wasp-animation-idle 8)
     (list capabilities)
     'idle pos #f 0 0)))

(define (wasp-capabilities w) (list-ref w (+ entity-size 0)))
(define (wasp-state w) (list-ref w (+ entity-size 1)))
(define (wasp-modify-state w s) (list-replace w (+ entity-size 1) s))
(define (wasp-walk-from w) (list-ref w (+ entity-size 2)))
(define (wasp-modify-walk-from w s) (list-replace w (+ entity-size 2) s))
(define (wasp-dest-cell w) (list-ref w (+ entity-size 3)))
(define (wasp-modify-dest-cell w s) (list-replace w (+ entity-size 3) s))
(define (wasp-walk-time w) (list-ref w (+ entity-size 4)))
(define (wasp-modify-walk-time w s) (list-replace w (+ entity-size 4) s))
(define (wasp-timer w) (list-ref w (+ entity-size 5)))
(define (wasp-modify-timer w s) (list-replace w (+ entity-size 5) s))

(define (wasp-build-menu-options w)
  (map
   (lambda (c)
     (cond
      ((eq? c 'forage) (build-menu-option c "Forage"))
      ((eq? c 'lay-egg) (build-menu-option c "Lay Egg"))
      ((eq? c 'build-cell) (build-menu-option c "Build Cell"))
      ((eq? c 'tend-brood) (build-menu-option c "Tend brood"))
      ((eq? c 'defend-nest) (build-menu-option c "Defend Nest"))
      (else (build-menu-option 'unknown "Unknown option...?"))))
   (wasp-capabilities w)))

(define (wasp-update-action w menu-code nest)
  (cond
   ((eq? menu-code 'build-cell) 
    (let ((dest-cell (nest-find-unbuilt-cell nest 0)))
      ;; it's possible we coundn't find any free cells
      (if dest-cell
	  (wasp-modify-state
	   (wasp-modify-walk-time 
	    (wasp-modify-dest-cell 
	     (wasp-modify-walk-from 
	      ;; face the right direction
	      (if (< (vx (entity-pos w)) (vx (cell-pos dest-cell)))
		  (entity-modify-facing w 'right)
		  (entity-modify-facing w 'left))
	      (entity-pos w))
	     dest-cell)
	    0)
	   'state-walking-to-cell)
	  w)))
   (else w)))

(define wasp-speed 2)
(define wasp-build-time 2)

(define (wasp-update w delta)
  (wasp-update-animation
   (let ((state (wasp-state w)))
     (cond
      ((eq? state 'state-idle) w)
      ((eq? state 'state-walking-to-cell)
       (if (> (wasp-walk-time w) 1)
	   (wasp-modify-timer (wasp-modify-state w 'state-building-cell) 0)
	   (entity-modify-pos 
	    (wasp-modify-walk-time w (+ (wasp-walk-time w) (* wasp-speed delta)))
	    (v2lerp 
	     (wasp-walk-from w)
	     (cell-pos (wasp-dest-cell w)) 
	     (wasp-walk-time w)))))
      ((eq? state 'state-building-cell) 
       (if (> (wasp-timer w) wasp-build-time)
	   (wasp-modify-state w 'state-built-cell)
	   w))
      ((eq? state 'state-built-cell) 
       (wasp-modify-state w 'state-idle))
      (else w)))
   delta))

(define (wasp-update-animation w delta)
  (let ((state (wasp-state w)))
    (entity-modify-clip 
     (wasp-modify-timer w (+ (wasp-timer w) delta))
     (cond
      ((eq? state 'state-idle) wasp-animation-idle)
      ((eq? state 'state-walking-to-cell) wasp-animation-walk)
      ((eq? state 'state-building-cell) wasp-animation-build)
      (else (entity-clip w))))))

(define (wasp-update-cells wasp cells)
  (cond
   ((eq? (wasp-state wasp) 'state-built-cell)
    (msg "built cell")
    (map
     (lambda (cell)
       (if (and (eq? (vx (cell-pos (wasp-dest-cell wasp))) (vx (cell-pos cell)))
		(eq? (vy (cell-pos (wasp-dest-cell wasp))) (vy (cell-pos cell))))
	   (cell-modify-code cell 'cell-code-avail)
	   cell))
     cells))
   (else cells)))
