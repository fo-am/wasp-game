;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define queen-capabilities (list 'forage 'lay-female-egg 'lay-repro-egg 'tend-brood 'build-cell))
(define worker-capabilities (list 'forage 'lay-male-egg 'tend-brood 'build-cell))
(define repro-capabilities (list 'disperse))

(define wasp-speed (local-get-param "wasp-game" "wasp-speed"))
(define wasp-build-time (local-get-param "wasp-game" "wasp-build-time"))
(define wasp-laying-time (local-get-param "wasp-game" "wasp-laying-time"))
(define wasp-tending-time (local-get-param "wasp-game" "wasp-tending-time"))
(define wasp-egg-time (local-get-param "wasp-game" "wasp-egg-time"))
(define wasp-forage-time (local-get-param "wasp-game" "wasp-forage-time"))
(define wasp-dying-time (local-get-param "wasp-game" "wasp-dying-time"))
(define wasp-disperse-time (local-get-param "wasp-game" "wasp-disperse-time"))
(define wasp-mating-time (local-get-param "wasp-game" "wasp-mating-time"))
(define wasp-reproductive-threshold (local-get-param "wasp-game" "wasp-reproductive-threshold"))

(define wasp-anim-variations (list "2" "4" "5" "6" "7"))

(define wasp-animation
  (list
   (make-anim-move "pupae" "pupa1" '() (list "1") 8 (vec2 0 0))
   (make-anim-move "pupae" "pupa1" '() (list "1" "2" "3" "4") 8 (vec2 0 0))
   (make-anim-move "wasp" "idle" wasp-anim-variations (list "1" "2") 8 (vec2 0 0))
   (make-anim-move "wasp" "walk" wasp-anim-variations (list "1" "2" "3" "2") 8 (vec2 0 0))
   (make-anim-move "wasp" "defend" wasp-anim-variations (list "1" "2" "3" "2") 8 (vec2 0 0))
   (make-anim-move "wasp" "build" wasp-anim-variations (list "1" "2") 8 (vec2 -50 -40))
   (make-anim-move "wasp" "fly" wasp-anim-variations (list "1" "2" "3" "4" "5" "4" "3" "2") 32 (vec2 0 0))
   (make-anim-move "wasp" "flycat" wasp-anim-variations (list "1" "2" "3" "4" "5" "4" "3" "2") 32 (vec2 0 0))
   (make-anim-move "wasp" "flyspider" wasp-anim-variations (list "1" "2" "3" "4" "5" "4" "3" "2") 32 (vec2 0 0))
   (make-anim-move "wasp" "flyfly" wasp-anim-variations (list "1" "2" "3" "4" "5" "4" "3" "2") 32 (vec2 0 0))
   (make-anim-move "wasp" "lay" wasp-anim-variations (list "1" "2" "3" "4" "3" "4" "3" "4" "3" "2") 8 (vec2 60 -50))
   (make-anim-move "wasp" "tend" wasp-anim-variations (list "1" "2") 8 (vec2 -50 -20))
   ))

(define wasp-animation-egg 0)
(define wasp-animation-egg-tended 1)
(define wasp-animation-idle 2)
(define wasp-animation-walk 3)
(define wasp-animation-defend 4)
(define wasp-animation-build 5)
(define wasp-animation-fly 6)
(define wasp-animation-flycat 7)
(define wasp-animation-flyspider 8)
(define wasp-animation-flyfly 9)
(define wasp-animation-lay 10)
(define wasp-animation-tend 11)

(define wasp-prey-types (list 'spider 'caterpillar 'fly))

;; the only time we make wasps (without being eggs) is the initial queen(s)
(define (make-wasp capabilities) 
  (let ((pos (vec2 (+ 100 (random 1000)) (+ 100 (random 500)))))
    (append 
     (make-entity 
      (generate-entity-id!)
      "wasp" 
      pos 0
      (vec2 200 150)
      (choose (list "left" "right"))
      (rndf)
      (anim-load-frames (choose wasp-anim-variations) wasp-animation)
      0 wasp-animation-idle (find-image "sprites/queen-glow.png") 0 pos #f 0 0 (vec2 0 0))
     (list capabilities 'state-idle #f 'queen #f 'repro))))

(define (make-female-egg pos parent) 
  (append 
   (make-entity 
    (generate-entity-id!)
    "wasp" 
    pos 0
    (vec2 300 300)
    "left"
    (rndf)
    (anim-load-frames (choose wasp-anim-variations) wasp-animation)
    0 wasp-animation-egg #f -1 pos pos 0 0 (vec2 0 0))
   (list '() 'state-egg #f 'female #f parent)))

(define (make-male-egg pos parent) 
  (append 
   (make-entity 
    (generate-entity-id!)
    "wasp" 
    pos 0
    (vec2 300 300)
    "left"
    (rndf)
    (anim-load-frames (choose wasp-anim-variations) wasp-animation)
    0 wasp-animation-egg #f -1 pos pos 0 0 (vec2 0 0))
   (list '() 'state-egg #f 'male #f parent)))

(define (make-repro-egg pos parent) 
  (append 
   (make-entity 
    (generate-entity-id!)
    "wasp" 
    pos 0
    (vec2 300 300)
    "left"
    (rndf)
    (anim-load-frames (choose wasp-anim-variations) wasp-animation)
    0 wasp-animation-egg #f -1 pos pos 0 0 (vec2 0 0))
   (list '() 'state-egg #f 'repro #f parent)))

(define (wasp-capabilities w) (list-ref w (+ entity-size 0)))
(define (wasp-modify-capabilities w v) (list-replace w (+ entity-size 0) v))
(define (wasp-state w) (list-ref w (+ entity-size 1)))
(define (wasp-modify-state w s) (list-replace w (+ entity-size 1) s))
(define (wasp-tending-id w) (list-ref w (+ entity-size 2)))
(define (wasp-modify-tending-id w s) (list-replace w (+ entity-size 2) s))
(define (wasp-type w) (list-ref w (+ entity-size 3)))
(define (wasp-carrying w) (list-ref w (+ entity-size 4)))
(define (wasp-modify-carrying w s) (list-replace w (+ entity-size 4) s))
(define (wasp-parent w) (list-ref w (+ entity-size 5)))

(define (wasp-foraging? w)
  (or
   (eq? (wasp-state w) 'state-forage-start)
   (eq? (wasp-state w) 'state-forage)
   (eq? (wasp-state w) 'state-forage-return)))

;; capabilities -> menu options
(define (wasp-build-menu-options w n)
  (foldl
   (lambda (c r)
     (cond
      ((eq? c 'forage) 
       (cons (build-menu-option c "FORAGE") r))
      ((and (eq? c 'lay-female-egg) (nest-find-empty-cell n)
	    (nest-can-do-action n c)) 
       (cons (build-menu-option c "LAY FEMALE EGG") r))
      ((and (eq? c 'lay-male-egg) (nest-find-empty-cell n)
	    (nest-can-do-action n c)) 
       (cons (build-menu-option c "LAY MALE EGG") r))
      ((and (eq? c 'lay-repro-egg)
	    (nest-find-empty-cell n)
	    (nest-can-do-action n c)
	    (> (length (nest-wasps n)) wasp-reproductive-threshold))
       (cons (build-menu-option c "LAY REPRODUCTIVE") r))
      ((and (eq? c 'build-cell) (nest-can-do-action n c)) 
       (cons (build-menu-option c "BUILD CELL") r))
      ((and (eq? c 'tend-brood)
	    (nest-can-do-action n c)
	    (nest-find-wasp-in-state n 'state-egg)) 
       (cons (build-menu-option c "TEND BROOD") r))
      ((and (eq? c 'defend-nest) (nest-can-do-action n c))
       (cons (build-menu-option c "DEFEND NEST") r))
      ((and (eq? c 'disperse) (nest-can-do-action n c)) 
       (cons (build-menu-option c "DISPERSE") r))
      (else r)))
   '()
   (wasp-capabilities w)))

;; set up a wasp to walk to a destination cell
(define (wasp-walk-to-cell w dest-cell next-clip)
  (entity-walk-to-pos-offset w (cell-pos dest-cell) next-clip))

(define (wasp-fly-to-forage w nest)
  (play-sound (choose (list "wasp-takeoff-1.wav" "wasp-takeoff-2.wav" "wasp-takeoff-3.wav")))
  (wasp-modify-state 
   (entity-modify-walk-time 
    (entity-modify-walk-to 
     (entity-modify-walk-from 
      (entity-modify-facing w 'right)
      (entity-pos w))
     (vec2 1800 500))
    0)
   'state-take-off))

;; deal with menu clicks from the player
(define (wasp-update-action w menu-code nest)
  (cond
   ((eq? menu-code 'forage) 
    (wasp-fly-to-forage w nest))
   ((eq? menu-code 'disperse) 
    (wasp-fly-to-forage w nest))
   ((eq? menu-code 'build-cell) 
    (let ((dest-cell (nest-find-unbuilt-cell nest)))
      ;; it's possible we coundn't find any free cells
      (if dest-cell
	  (wasp-modify-state
	   (wasp-walk-to-cell w dest-cell wasp-animation-build) 
	   'state-walking-to-cell)
	  w)))
   ((eq? menu-code 'lay-female-egg) 
    (let ((dest-cell (nest-find-empty-cell nest)))
      ;; it's possible we coundn't find any free cells
      (if dest-cell
	  (wasp-modify-state
	   (wasp-walk-to-cell w dest-cell wasp-animation-lay) 
	   'state-walking-to-lay-female)
	  w)))
   ((eq? menu-code 'lay-male-egg) 
    (let ((dest-cell (nest-find-empty-cell nest)))
      ;; it's possible we coundn't find any free cells
      (if dest-cell
	  (wasp-modify-state
	   (wasp-walk-to-cell w dest-cell wasp-animation-lay) 
	   'state-walking-to-lay-male)
	  w)))
   ((eq? menu-code 'lay-repro-egg) 
    (let ((dest-cell (nest-find-empty-cell nest)))
      ;; it's possible we coundn't find any free cells
      (if dest-cell
	  (wasp-modify-state
	   (wasp-walk-to-cell w dest-cell wasp-animation-lay) 
	   'state-walking-to-lay-repro)
	  w)))
   ((eq? menu-code 'tend-brood) 
    (let ((dest-egg (nest-find-wasp-in-state nest 'state-egg)))
      ;; it's possible we coundn't find any egg
      (if dest-egg
	  (wasp-modify-state
	   (entity-walk-to-pos-offset 
	    (wasp-modify-tending-id w (entity-id dest-egg)) 
	    (entity-pos dest-egg)
	    wasp-animation-tend) 
	   'state-walking-to-tend)
	  w)))
   (else w)))

(define (wasp-start-wandering w nest)
  (wasp-modify-state
   (wasp-walk-to-cell w (nest-find-any-cell nest) #f)
   'state-wander))
	   
;; main state update function, full lifecycle of the wasp
(define (wasp-update w delta nest)
  (wasp-update-animation
   (let ((state (wasp-state w)))
     (cond
      ((eq? state 'state-egg)
       (if (> (entity-timer w) wasp-egg-time)
	   (wasp-modify-state w 'state-died-egg)
	   w))
      ((eq? state 'state-tended-egg)
       (if (> (entity-timer w) wasp-egg-time)
	   (begin
	     (play-sound "hatch.wav")
	     (entity-modify-depth-plane
	      (cond
	       ((eq? (wasp-type w) 'female)
		(update-scores-num-workers-hatched! 1)
		(wasp-modify-capabilities
		 (wasp-modify-state w 'state-hatched)
		 worker-capabilities))
	       (else
		(update-scores-num-reproductives-hatched! 1)
		(entity-modify-bg-image
		 (wasp-modify-capabilities
		  (wasp-modify-state w 'state-hatched)
		  repro-capabilities)
		 ;; add the glow indicator to the reproductives
		 (find-image "sprites/glow.png"))))
	      0))
	   w))
      ((eq? state 'state-hatched) (wasp-start-wandering w nest))

      ((eq? state 'state-male-removed)
       (wasp-modify-state w 'state-died-egg))
      
      ((eq? state 'state-idle)
       (if (> (entity-timer w) 5)
	   (wasp-modify-state w 'state-egg-check)
	   w))
      
      ((eq? state 'state-walking-to-cell)
       (if (>= (entity-walk-time w) 1)
	   (begin
	     (play-sound (choose (list "activity-1.wav" "activity-2.wav" "activity-3.wav")))
	     (entity-modify-timer (wasp-modify-state w 'state-building-cell) 0))
	   (entity-walk w wasp-speed delta)))

      ((eq? state 'state-building-cell) 
       (if (> (entity-timer w) wasp-build-time)
	   (wasp-modify-state w 'state-built-cell)
	   w))
      ((eq? state 'state-built-cell)
       (update-scores-cells-built! 1)
       (wasp-start-wandering w nest))

      ((eq? state 'state-walking-to-lay-female)
       (if (>= (entity-walk-time w) 1)
	   (entity-modify-timer (wasp-modify-state w 'state-laying-female-egg) 0)
	   (entity-walk w wasp-speed delta)))
      ((eq? state 'state-laying-female-egg) 
       (if (> (entity-timer w) wasp-laying-time)
	   (wasp-modify-state w 'state-laid-female-egg)
	   w))
      ((eq? state 'state-laid-female-egg)
       (play-sound (choose (list "activity-1.wav" "activity-2.wav" "activity-3.wav")))	     
       (wasp-start-wandering w nest))

      ((eq? state 'state-walking-to-lay-male)
       (if (>= (entity-walk-time w) 1)
	   (entity-modify-timer (wasp-modify-state w 'state-laying-male-egg) 0)
	   (entity-walk w wasp-speed delta)))
      ((eq? state 'state-laying-male-egg) 
       (if (> (entity-timer w) wasp-laying-time)
	   (wasp-modify-state w 'state-laid-male-egg)
	   w))
      ((eq? state 'state-laid-male-egg)
       (play-sound (choose (list "activity-1.wav" "activity-2.wav" "activity-3.wav")))	     
       (wasp-start-wandering w nest))
      
      ((eq? state 'state-walking-to-lay-repro)
       (if (>= (entity-walk-time w) 1)
	   (begin
	     (play-sound (choose (list "activity-1.wav" "activity-2.wav" "activity-3.wav")))
	     (entity-modify-timer (wasp-modify-state w 'state-laying-repro-egg) 0))
	   (entity-walk w wasp-speed delta)))
      ((eq? state 'state-laying-repro-egg) 
       (if (> (entity-timer w) wasp-laying-time)
	   (wasp-modify-state w 'state-laid-repro-egg)
	   w))
      ((eq? state 'state-laid-repro-egg) (wasp-start-wandering w nest))
      
      ((eq? state 'state-wander)
       (if (>= (entity-walk-time w) 1)
	   (entity-modify-timer (wasp-modify-state w 'state-idle) 0)
	   (entity-walk w wasp-speed delta)))

      ((eq? state 'state-take-off)
       (if (>= (entity-walk-time w) 1)
	   (entity-modify-timer
	    (wasp-modify-state
	     w (if (eq? (wasp-type w) 'repro)
		   'state-disperse-start
		   'state-forage-start)) 0)
	   (entity-walk w wasp-speed delta)))
      
      ((eq? state 'state-forage-start)
       (wasp-modify-state w 'state-forage))
      ((eq? state 'state-forage)
       (if (> (entity-timer w) (/ wasp-forage-time 2))
	   (entity-modify-facing
	    (wasp-modify-carrying
	     (entity-modify-timer
	      (wasp-modify-state w 'state-forage-return) 0)
	     (choose wasp-prey-types))
	    'left)
	    (entity-walk w wasp-speed delta)))
      ((eq? state 'state-forage-return)
       (if (> (entity-timer w) (/ wasp-forage-time 2))
	   (entity-modify-timer (wasp-modify-state w 'state-forage-end) 0)
	   (entity-walk w wasp-speed delta)))
      ((eq? state 'state-forage-end)       
       (play-sound (choose (list "wasp-landing-1.wav" "wasp-landing-2.wav" "wasp-landing-3.wav")))
       (wasp-modify-state 
	(wasp-walk-to-cell
	 w (or			       
	    (nest-find-occupied-cell nest)
	    (nest-find-empty-cell nest)
	    (nest-find-any-cell nest)) #f)
	'state-forage-feed))
      ((eq? state 'state-forage-feed)
       (if (>= (entity-walk-time w) 1)
	   (wasp-modify-state w 'state-forage-fed)
	   (entity-walk w wasp-speed delta)))
      ((eq? state 'state-forage-fed)
       (wasp-modify-carrying (wasp-start-wandering w nest) #f))
      
      ((eq? state 'state-walking-to-tend)
       (if (>= (entity-walk-time w) 1)
	   (begin
	     (play-sound (choose (list "activity-1.wav" "activity-2.wav" "activity-3.wav")))
	     (entity-modify-timer (wasp-modify-state w 'state-tending) 0))
	   (entity-walk w wasp-speed delta)))
      ((eq? state 'state-tending) 
       (if (> (entity-timer w) wasp-tending-time)
	   (wasp-modify-state w 'state-tended)
	   w))
      ((eq? state 'state-tended) (wasp-start-wandering w nest))
      
      ((eq? state 'state-disperse-start)
       (play-sound (choose (list "wasp-takeoff-1.wav" "wasp-takeoff-2.wav" "wasp-takeoff-3.wav")))
       (wasp-modify-state w 'state-disperse))
      ((eq? state 'state-disperse)
       (if (> (entity-timer w) wasp-disperse-time)
	   (wasp-modify-state
	    w (if (eq? (time->season (nest-time-of-year nest)) 'winter)
		  'state-start-mating
		  'state-repro-start-dying))
	   (entity-walk w wasp-speed delta)))
      
      ;; intermediate state to pick up for scoring
      ((eq? state 'state-start-mating)
       (wasp-modify-state w 'state-mating))
      
      ((eq? state 'state-mating)
       (if (> (entity-timer w) wasp-mating-time)
	   (wasp-modify-state w 'state-mated)
	   (entity-walk w wasp-speed delta)))
      
      ((eq? state 'state-egg-check)
       (let ((dest-egg (nest-find-male-egg nest)))
	 ;; there is a male egg...
	 (if (and dest-egg
		  ;; if we didn't lay it
		  (not (eq? (wasp-parent dest-egg)
			    (entity-id w))))
	     (wasp-modify-tending-id
	      (entity-walk-to-pos 
	       (wasp-modify-state w 'state-walking-to-remove)
	       (entity-pos dest-egg))
	      (entity-id dest-egg))
	     (if (< (rndf) 0.5)
		 (wasp-start-wandering w nest)
		 (entity-modify-timer (wasp-modify-state w 'state-idle) 0)))))
      ((eq? state 'state-walking-to-remove)
       (if (>= (entity-walk-time w) 1) 
	   (wasp-modify-state w 'state-remove-egg)
	   (entity-walk w wasp-speed delta)))      
      ((eq? state 'state-remove-egg) (wasp-start-wandering w nest))

      ((eq? state 'state-repro-start-dying)
       (entity-modify-timer (wasp-modify-state w 'state-dying) 0))
      ((eq? state 'state-start-dying)
       (entity-modify-timer (wasp-modify-state w 'state-dying) 0))
      ((eq? state 'state-dying)
       (if (> (entity-timer w) wasp-dying-time)
	   (wasp-modify-state w 'state-died)
	   (entity-modify-pos w (v2add (entity-pos w) (vec2 0 5)))))
      
      (else w)))
   delta))

(define (wasp-fly-animation w)
  (cond
   ((eq? (wasp-carrying w) 'spider) wasp-animation-flyspider)
   ((eq? (wasp-carrying w) 'caterpillar) wasp-animation-flycat)
   ((eq? (wasp-carrying w) 'fly) wasp-animation-flyfly)
   (else wasp-animation-fly)))

;; map the states to the right animation clips
(define (wasp-update-animation w delta)  
  (let ((state (wasp-state w)))
    (entity-modify-clip 
     (entity-modify-timer w (+ (entity-timer w) delta))
     (cond
      ((eq? state 'state-tended-egg) wasp-animation-egg-tended)
      ((eq? state 'state-idle) wasp-animation-idle)
      ((eq? state 'state-walking-to-cell) wasp-animation-walk)
      ((eq? state 'state-walking-to-tend) wasp-animation-walk)
      ((eq? state 'state-building-cell) wasp-animation-build)
      ((eq? state 'state-walking-to-lay-male) wasp-animation-walk)
      ((eq? state 'state-walking-to-lay-female) wasp-animation-walk)
      ((eq? state 'state-walking-to-lay-repro) wasp-animation-walk)
      ((eq? state 'state-laying-female-egg) wasp-animation-lay)
      ((eq? state 'state-laying-male-egg) wasp-animation-lay)
      ((eq? state 'state-laying-repro-egg) wasp-animation-lay)
      ((eq? state 'state-wander) wasp-animation-walk)
      ((eq? state 'state-take-off) (wasp-fly-animation w))
      ((eq? state 'state-forage-start) (wasp-fly-animation w))
      ((eq? state 'state-forage) (wasp-fly-animation w))
      ((eq? state 'state-forage-return) (wasp-fly-animation w))
      ((eq? state 'state-tending) wasp-animation-tend)
      ((eq? state 'state-disperse) (wasp-fly-animation w))
      ;;((eq? state 'state-dying) wasp-animation-egg-tended)
      (else (entity-clip w))))))
  
;; update the code for the cells as things hatch etc
(define (wasp-update-cells wasp cells)
  (check-cells cells)
  (cond
   ;; laying egg
   ((or (eq? (wasp-state wasp) 'state-laid-female-egg)
	(eq? (wasp-state wasp) 'state-laid-male-egg)
	(eq? (wasp-state wasp) 'state-laid-repro-egg))
    (cond
     ((eq? (pos->cell-code (entity-walk-to wasp) cells) cell-code-empty)
      (update-cell-pos (entity-walk-to wasp) cells cell-code-occupied))
     (else
      (msg "trying to lay in a cell which is not built?")
      (msg (entity-walk-to wasp))
      (msg (wasp-state wasp))
      (msg (pos->cell-code (entity-walk-to wasp) cells))
      cells)))
      
   ;; building cell
   ((eq? (wasp-state wasp) 'state-built-cell)
    (cond
     ((eq? (pos->cell-code (entity-walk-to wasp) cells) cell-code-unbuilt)	
      (update-cell-pos (entity-walk-to wasp) cells cell-code-empty))
     (else
      (msg "trying to build a cell which is already built?")
      (msg (entity-walk-to wasp))
      (msg (wasp-state wasp))
      (msg (pos->cell-code (entity-walk-to wasp) cells))
      cells)))

   ;; empty cell as egg removed/hatched/died etc
   ((or
     (eq? (wasp-state wasp) 'state-hatched)
     (eq? (wasp-state wasp) 'state-died-egg)
     (eq? (wasp-state wasp) 'state-remove-egg)
     (eq? (wasp-state wasp) 'state-taken-egg)
     (eq? (wasp-state wasp) 'state-eaten-egg))
    (cond
     ((eq? (pos->cell-code (entity-walk-to wasp) cells) cell-code-occupied)	
      (update-cell-pos (entity-walk-to wasp) cells cell-code-empty))
     (else
      (msg "trying to empty a cell which is not occuped?")
      (msg (entity-walk-to wasp))
      (msg (wasp-state wasp))
      (msg (pos->cell-code (entity-walk-to wasp) cells))
      cells)))     
   (else cells)))

;; update new wasps mainly - could be much simpler
(define (wasp-update-wasps wasp wasps)
  (cond
   ((eq? (wasp-state wasp) 'state-laid-female-egg)
    (update-scores-num-workers-laid! 1)
    (cons
     (make-female-egg (entity-walk-to wasp) (entity-id wasp))
     wasps))
   ((eq? (wasp-state wasp) 'state-laid-male-egg)
    (cons
     (make-male-egg (entity-walk-to wasp) (entity-id wasp))
     wasps))
   ((eq? (wasp-state wasp) 'state-laid-repro-egg)
    (cons
     (make-repro-egg (entity-walk-to wasp) (entity-id wasp))
     wasps))
   ((eq? (wasp-state wasp) 'state-tended)
    (entity-list-modify 
     wasps (wasp-tending-id wasp)
     (lambda (other)
       ;; switch the egg to tended state...
       (if (eq? (wasp-state other) 'state-egg)
	   (if (eq? (wasp-type other) 'male)
	       ;; if the wasp is the parent of this egg
	       (if (eq? (entity-id wasp) (wasp-parent other))
		   other ;; silently don't tend
		   (wasp-modify-state other 'state-male-removed))
	       (wasp-modify-state other 'state-tended-egg))
	   other))))
   ((eq? (wasp-state wasp) 'state-remove-egg)
    (entity-list-remove-id wasps (wasp-tending-id wasp)))
   
   (else wasps)))
