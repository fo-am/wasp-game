;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define default-capabilities (list 'forage 'lay-egg 'tend-brood 'build-cell))

(define wasp-speed (local-get-param "wasp-game" "wasp-speed"))
(define wasp-build-time (local-get-param "wasp-game" "wasp-build-time"))
(define wasp-laying-time (local-get-param "wasp-game" "wasp-laying-time"))
(define wasp-tending-time (local-get-param "wasp-game" "wasp-tending-time"))
(define wasp-pupa-time (local-get-param "wasp-game" "wasp-pupa-time"))
(define wasp-forage-time (local-get-param "wasp-game" "wasp-forage-time"))

(define wasp-animation
  (list
   (make-anim-move "pupae" "pupa1" (list "1"))
   (make-anim-move "pupae" "pupa1" (list "1" "2" "3" "4"))
   (make-anim-move "wasp-7" "7-idle" (list "1" "2"))
   (make-anim-move "wasp-7" "7-walk" (list "1" "2" "3" "2"))
   (make-anim-move "wasp-7" "7-defend" (list "1" "2" "3" "2"))
   (make-anim-move "wasp-7" "7-build" (list "1" "2"))
   (make-anim-move "wasp-7" "7-fly" (list "1" "2" "3" "4" "5" "4" "3" "2"))
   (make-anim-move "wasp-7" "7-lay" (list "1" "2" "3" "4"))
   (make-anim-move "wasp-7" "7-tend" (list "1" "2"))
   ))

(define wasp-animation-pupa 0)
(define wasp-animation-pupa-tended 1)
(define wasp-animation-idle 2)
(define wasp-animation-walk 3)
(define wasp-animation-defend 4)
(define wasp-animation-build 5)
(define wasp-animation-fly 6)
(define wasp-animation-lay 7)
(define wasp-animation-tend 8)

(define (make-wasp capabilities) 
  (let ((pos (vec2 (random 1000) (random 500))))
    (append 
     (make-entity 
      (generate-entity-id!)
      "wasp" 
      pos
      (vec2 300 300)
      (choose (list "left" "right"))
      (rndf)
      (anim-load-frames wasp-animation)
      0 wasp-animation-idle 8)
     (list capabilities)
     'idle pos #f 0 0 #f)))

(define (make-pupa pos capabilities) 
  (append 
   (make-entity 
    (generate-entity-id!)
    "wasp" 
    pos
    (vec2 300 300)
    "left"
    (rndf)
    (anim-load-frames wasp-animation)
    0 wasp-animation-pupa 8)
   (list capabilities 'state-pupa pos pos 0 0 #f)))

(define (wasp-capabilities w) (list-ref w (+ entity-size 0)))
(define (wasp-modify-capabilities w v) (list-replace w (+ entity-size 0) v))
(define (wasp-state w) (list-ref w (+ entity-size 1)))
(define (wasp-modify-state w s) (list-replace w (+ entity-size 1) s))
(define (wasp-walk-from w) (list-ref w (+ entity-size 2)))
(define (wasp-modify-walk-from w s) (list-replace w (+ entity-size 2) s))
(define (wasp-walk-to w) (list-ref w (+ entity-size 3)))
(define (wasp-modify-walk-to w s) (list-replace w (+ entity-size 3) s))
(define (wasp-walk-time w) (list-ref w (+ entity-size 4)))
(define (wasp-modify-walk-time w s) (list-replace w (+ entity-size 4) s))
(define (wasp-timer w) (list-ref w (+ entity-size 5)))
(define (wasp-modify-timer w s) (list-replace w (+ entity-size 5) s))
(define (wasp-tending-id w) (list-ref w (+ entity-size 6)))
(define (wasp-modify-tending-id w s) (list-replace w (+ entity-size 6) s))

;; capabilities -> menu options
(define (wasp-build-menu-options w n)
  (foldl
   (lambda (c r)
     (cond
      ((eq? c 'forage) 
       (cons (build-menu-option c "Forage") r))
      ((and (eq? c 'lay-egg) (nest-find-empty-cell n)) 
       (cons (build-menu-option c "Lay Egg") r))
      ((eq? c 'build-cell) 
       (cons (build-menu-option c "Build Cell") r))
      ((and (eq? c 'tend-brood) 
	    (nest-find-wasp-in-state n 'state-pupa)) 
       (cons (build-menu-option c "Tend brood") r))
      ((eq? c 'defend-nest) 
       (cons (build-menu-option c "Defend Nest") r))
      (else r)))
   '()
   (wasp-capabilities w)))

;; set up a wasp to walk to a destination cell
(define (wasp-walk-to-cell w dest-cell)
  (wasp-walk-to-pos w (cell-pos dest-cell)))

(define (wasp-walk-to-pos w pos)
  (wasp-modify-walk-time 
   (wasp-modify-walk-to
    (wasp-modify-walk-from 
     ;; face the right direction
     (if (< (vx (entity-pos w)) (vx pos))
	 (entity-modify-facing w 'right)
	 (entity-modify-facing w 'left))
     (entity-pos w))
    pos)
   0))

(define (wasp-fly-to-forage w nest)
  (wasp-modify-state 
   (wasp-modify-walk-time 
    (wasp-modify-walk-to 
     (wasp-modify-walk-from 
      (entity-modify-facing w 'right)
      (entity-pos w))
     (vec2 1800 500))
    0)
   'state-take-off))

;; deal with menu clicks from the player
(define (wasp-update-action w menu-code nest)
  (cond
   ((eq? menu-code 'forage) 
    (wasp-fly-to-forage w nest))
   ((eq? menu-code 'build-cell) 
    (let ((dest-cell (nest-find-unbuilt-cell nest 0)))
      ;; it's possible we coundn't find any free cells
      (if dest-cell
	  (wasp-modify-state
	   (wasp-walk-to-cell w dest-cell) 
	   'state-walking-to-cell)
	  w)))
   ((eq? menu-code 'lay-egg) 
    (let ((dest-cell (nest-find-empty-cell nest)))
      ;; it's possible we coundn't find any free cells
      (if dest-cell
	  (wasp-modify-state
	   (wasp-walk-to-cell w dest-cell) 
	   'state-walking-to-lay)
	  w)))
   ((eq? menu-code 'tend-brood) 
    (let ((dest-pupa (nest-find-wasp-in-state nest 'state-pupa)))
      ;; it's possible we coundn't find any pupa
      (if dest-pupa
	  (wasp-modify-state
	   (wasp-walk-to-pos 
	    (wasp-modify-tending-id w (entity-id dest-pupa)) 
	    (entity-pos dest-pupa)) 
	   'state-walking-to-tend)
	  w)))
   (else w)))

(define (wasp-walk w delta)
  (entity-modify-pos 
   (wasp-modify-walk-time w (min 1 (+ (wasp-walk-time w) (* wasp-speed delta))))
   (v2lerp 
    (wasp-walk-from w)
    (wasp-walk-to w) 
    (wasp-walk-time w))))

;; main state update function, full lifecycle of the wasp
(define (wasp-update w delta nest)
  (wasp-update-animation
   (let ((state (wasp-state w)))
     (cond
      ((eq? state 'state-pupa)
       (if (> (wasp-timer w) wasp-pupa-time)
	   (wasp-modify-state w 'state-died)
	   w))
      ((eq? state 'state-tended-pupa)
       (if (> (wasp-timer w) wasp-pupa-time)
	   (wasp-modify-capabilities
	    (wasp-modify-state w 'state-hatched)
	    default-capabilities)
	   w))
      ((eq? state 'state-hatched) 
       (wasp-modify-state
	(wasp-walk-to-cell w (nest-find-any-cell nest))
	'state-wander))

      ((eq? state 'state-idle) w)

      ((eq? state 'state-walking-to-cell)
       (if (>= (wasp-walk-time w) 1)
	   (wasp-modify-timer (wasp-modify-state w 'state-building-cell) 0)
	   (wasp-walk w delta)))

      ((eq? state 'state-building-cell) 
       (if (> (wasp-timer w) wasp-build-time)
	   (wasp-modify-state w 'state-built-cell)
	   w))
      ((eq? state 'state-built-cell) 
       (wasp-modify-state
	(wasp-walk-to-cell w (nest-find-any-cell nest))
	'state-wander))

      ((eq? state 'state-walking-to-lay)
       (if (>= (wasp-walk-time w) 1)
	   (wasp-modify-timer (wasp-modify-state w 'state-laying-egg) 0)
	   (wasp-walk w delta)))
      ((eq? state 'state-laying-egg) 
       (if (> (wasp-timer w) wasp-laying-time)
	   (wasp-modify-state w 'state-layed-egg)
	   w))
      ((eq? state 'state-layed-egg) 
       (wasp-modify-state
	(wasp-walk-to-cell w (nest-find-any-cell nest))
	'state-wander))

      ((eq? state 'state-wander)
       (if (>= (wasp-walk-time w) 1)
	   (wasp-modify-timer (wasp-modify-state w 'state-idle) 0)
	   (wasp-walk w delta)))

      ((eq? state 'state-take-off)
       (if (>= (wasp-walk-time w) 1)
	   (wasp-modify-timer (wasp-modify-state w 'state-forage-start) 0)
	   (wasp-walk w delta)))
      ((eq? state 'state-forage-start)
       (wasp-modify-state w 'state-forage))
      ((eq? state 'state-forage)
       (if (> (wasp-timer w) (/ wasp-forage-time 2))
	   (wasp-modify-timer (wasp-modify-state w 'state-forage-return) 0)
	   (wasp-walk w delta)))
      ((eq? state 'state-forage-return)
       (if (> (wasp-timer w) (/ wasp-forage-time 2))
	   (wasp-modify-timer (wasp-modify-state w 'state-forage-end) 0)
	   (wasp-walk w delta)))
      ((eq? state 'state-forage-end)       
       (wasp-modify-state 
	(wasp-walk-to-cell w (nest-find-any-cell nest))
	'state-forage-finish))
      ((eq? state 'state-forage-finish)
       (if (>= (wasp-walk-time w) 1)
	   (wasp-modify-timer (wasp-modify-state w 'state-idle) 0)
	   (wasp-walk w delta)))

      ((eq? state 'state-walking-to-tend)
       (if (>= (wasp-walk-time w) 1)
	   (wasp-modify-timer (wasp-modify-state w 'state-tending-egg) 0)
	   (wasp-walk w delta)))
      ((eq? state 'state-tending-egg) 
       (if (> (wasp-timer w) wasp-tending-time)
	   (wasp-modify-state w 'state-tended-egg)
	   w))
      ((eq? state 'state-tended-egg) 
       (wasp-modify-state
	(wasp-walk-to-cell w (nest-find-any-cell nest))
	'state-wander))

      (else w)))
   delta))

;; map the states to the right animation clips
(define (wasp-update-animation w delta)
  (let ((state (wasp-state w)))
    (entity-modify-clip 
     (wasp-modify-timer w (+ (wasp-timer w) delta))
     (cond
      ((eq? state 'state-tended-pupa) wasp-animation-pupa-tended)
      ((eq? state 'state-idle) wasp-animation-idle)
      ((eq? state 'state-walking-to-cell) wasp-animation-walk)
      ((eq? state 'state-walking-to-tend) wasp-animation-walk)
      ((eq? state 'state-building-cell) wasp-animation-build)
      ((eq? state 'state-walking-to-lay) wasp-animation-walk)
      ((eq? state 'state-laying-egg) wasp-animation-lay)
      ((eq? state 'state-wander) wasp-animation-walk)
      ((eq? state 'state-take-off) wasp-animation-fly)
      ((eq? state 'state-forage-start) wasp-animation-fly)
      ((eq? state 'state-forage) wasp-animation-fly)
      ((eq? state 'state-tending-egg) wasp-animation-tend)
      (else (entity-clip w))))))

(define (update-cell pos cells code)
  (map
   (lambda (cell)
     (if (and (eq? (vx pos) (vx (cell-pos cell)))
	      (eq? (vy pos) (vy (cell-pos cell))))
	 (cell-modify-code cell code)
	 cell))
   cells))

;; update the code for the cells as things hatch etc
(define (wasp-update-cells wasp cells)
  (cond
   ((eq? (wasp-state wasp) 'state-built-cell)
    (update-cell (wasp-walk-to wasp) cells cell-code-empty))
   ((eq? (wasp-state wasp) 'state-layed-egg)
    (update-cell (wasp-walk-to wasp) cells cell-code-occupied))
   ((eq? (wasp-state wasp) 'state-hatched)
    (update-cell (wasp-walk-to wasp) cells cell-code-empty))
   ((eq? (wasp-state wasp) 'state-died)
    (update-cell (wasp-walk-to wasp) cells cell-code-empty))
   (else cells)))

;; update new wasps mainly - could be much simpler
(define (wasp-update-wasps wasp wasps)
  (cond
   ((eq? (wasp-state wasp) 'state-layed-egg)
    (cons
     (make-pupa (wasp-walk-to wasp)
		(list))
     wasps))
   ((eq? (wasp-state wasp) 'state-tended-egg)
    (entity-list-modify 
     wasps (wasp-tending-id wasp)
     (lambda (other)
       ;; switch the pupa to tended state...
       (if (eq? (wasp-state other) 'state-pupa)
	   (wasp-modify-state other 'state-tended-pupa)
	   other))))
   (else wasps)))
