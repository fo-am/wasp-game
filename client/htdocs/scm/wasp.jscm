;; -*- mode: scheme; -*-

(define wasp-animation
  (list
   (make-anim-move "7" "idle" (list "1" "2"))
   (make-anim-move "7" "walk" (list "1" "2" "3" "2"))
   (make-anim-move "7" "defend" (list "1" "2" "3" "2"))
   (make-anim-move "7" "build" (list "1" "2"))
   (make-anim-move "7" "fly" (list "1" "2" "3" "4" "5"))
   (make-anim-move "7" "lay" (list "1" "2" "3" "4"))
   (make-anim-move "7" "tend" (list "1" "2"))
   ))

(define wasp-animation-idle 0)
(define wasp-animation-walk 1)

(define (make-wasp capabilities) 
  (let ((pos (vec2 (random 1000) (random 500))))
    (append 
     (make-entity 
      (generate-entity-id!)
      "wasp" 
      pos
      (vec2 300 300)
      (choose (list "left" "right"))
      (rndf)
      (anim-load-frames wasp-animation)
      wasp-animation-idle (random 7) 8)
     (list capabilities)
     'idle pos #f 0)))

(define (wasp-capabilities w) (list-ref w (+ entity-size 0)))
(define (wasp-state w) (list-ref w (+ entity-size 1)))
(define (wasp-modify-state w s) (list-replace w (+ entity-size 1) s))
(define (wasp-walk-from w) (list-ref w (+ entity-size 2)))
(define (wasp-modify-walk-from w s) (list-replace w (+ entity-size 2) s))
(define (wasp-dest-cell w) (list-ref w (+ entity-size 2)))
(define (wasp-modify-dest-cell w s) (list-replace w (+ entity-size 2) s))
(define (wasp-walk-time w) (list-ref w (+ entity-size 3)))
(define (wasp-modify-walk-time w s) (list-replace w (+ entity-size 3) s))

(define (wasp-build-menu-options w)
  (map
   (lambda (c)
     (cond
      ((eq? c 'forage) (build-menu-option c "Forage"))
      ((eq? c 'lay-egg) (build-menu-option c "Lay Egg"))
      ((eq? c 'build-cell) (build-menu-option c "Build Cell"))
      ((eq? c 'tend-brood) (build-menu-option c "Tend brood"))
      ((eq? c 'defend-nest) (build-menu-option c "Defend Nest"))
      (else (build-menu-option 'unknown "Unknown option...?"))))
   (wasp-capabilities w)))

(define (wasp-update-action w menu-code nest)
  (cond
   ((eq? menu-code 'build-cell) 
    (wasp-modify-state
     (wasp-modify-walk-time 
      (wasp-modify-dest-cell 
       (wasp-modify-walk-from w (entity-pos w))
       (nest-find-unbuilt-cell nest))
      0)
     'walking-to-cell))
   (else w)))

(define wasp-speed 1)

(define (wasp-update-state w delta)
  (let ((state (wasp-state w)))
    (cond
     ((eq? state 'state-idle) w)
     ((eq? state 'walking-to-cell)
      (if (> (wasp-walk-time w) 1)
	  (wasp-modify-state w 'state-idle)
	  (entity-modify-pos 
	   (wasp-modify-walk-time w (+ (wasp-walk-time w) (* wasp-speed delta)))
	   (v2lerp 
	    (entity-pos w) 
	    (cell-pos (wasp-dest-cell w)) 
	    (wasp-walk-time w)))))
     (else w))))
