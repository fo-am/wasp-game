;; -*- mode: scheme; -*-
;; Why We Love Wasps Copyright (C) 2019 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define info-duration 7)
(define info-short-duration 2)

(define (make-info text id time)
  (list text id time))

(define (info-text i) (list-ref i 0))
(define (info-id i) (list-ref i 1))
(define (info-time i) (list-ref i 2))
(define (info-modify-time i v) (list-replace i 2 v))

(define (make-info-display items)
  (list items))

(define (info-display-items d) (list-ref d 0))

(define (info-display-contains? d id)
  (cond
   ((eq? id 'allow-dup) #f)
   (else 
    (foldl
     (lambda (i r)
       (if (and (not r) (eq? (info-id i) id))
	   #t r))
     #f
     (info-display-items d)))))

(define (info-display-add d i)
  (if (info-display-contains? d (info-id i))
      d (make-info-display
	 (append (info-display-items d) (list i)))))

(define (info-display-update d delta)
  (make-info-display
   (filter
    (lambda (i)
      (< (info-time i)
	 (if (> (length (info-display-items d)) 1)
	     info-short-duration
	     info-duration)))
    (if (not (null? (info-display-items d)))
	(cons
	 (info-modify-time
	  (car (info-display-items d))
	  (+ (info-time (car (info-display-items d))) delta))
	 (cdr (info-display-items d)))
	'()))))

(define info-box-x 0)
(define info-box-y 60)
(define info-box-w 1265)
(define info-box-h 70)
(define info-box-m -110)

(define (info-box-render-box ctx) 
  ;;(set! ctx.fillStyle highlight2-col)
  ;;(ctx.fillRect info-box-x info-box-y info-box-w info-box-h)
  0)

(define (info-box-render-text ctx text) 
  (set! ctx.fillStyle text-col)
  (set! ctx.font "bold 30pt pompiere")
  (wrap-text ctx text info-box-m (+ info-box-y 48) info-box-w 30))

(define (info-display-render d ctx)
  (when (not (null? (info-display-items d)))
	(let ((item (car (info-display-items d))))
	  (info-box-render-box ctx)
	  (info-box-render-text ctx (info-text item)))))


